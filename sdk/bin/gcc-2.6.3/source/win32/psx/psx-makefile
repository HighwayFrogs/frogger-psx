# Makefile generated by "config-nt.bat"
all.nt: cpp.exe cc1.exe cc1obj.exe xgcc.exe ld.exe stmp-headers libgcc.lib stmp-float_h specs stamp-objlist
# Makefile for GNU C compiler.
#   Copyright (C) 1987, 88, 90-94, 1995 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston MA 02111-1307, USA.

# The targets for external use include:
# all, doc, proto, install, install-cross, install-cross-rest,
# uninstall, TAGS, mostlyclean, clean, distclean, maintainer-clean,
# stage1, stage2, stage3, stage4.

# Suppress smart makes who think they know how to automake Yacc files
.y.c:

# Variables that exist for you to override.
# See below for how to change them for certain systems.

# List of language subdirectories.
# This is overridden by configure.
SUBDIRS =

# Selection of languages to be made.
# This is overridden by configure.
LANGUAGES = c objective-c proto

ALLOCA = alloca.o
ALLOCA_FLAGS =
ALLOCA_FINISH =

# Various ways of specifying flags for compilations:  
# CFLAGS is for the user to override to, e.g., do a bootstrap with -O2.
# BOOT_CFLAGS is the value of CFLAGS to pass
# to the stage2 and stage3 compilations
# XCFLAGS is used for most compilations but not when using the GCC just built.
XCFLAGS =
CFLAGS =
BOOT_CFLAGS = -O $(CFLAGS)
# These exists to be overridden by the x-* and t-* files, respectively.
X_CFLAGS =
T_CFLAGS =

X_CPPFLAGS =
T_CPPFLAGS =

CC = cl
BISON = bison
BISONFLAGS =
LEX = flex
LEXFLAGS =
AR = ar
OLDAR_FLAGS = qc
AR_FLAGS = rc
SHELL =
# on sysV, define this as cp.
INSTALL = install -c
# These permit overriding just for certain files.
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)
MAKEINFO = makeinfo
TEXI2DVI = texi2dvi
# For GNUmake: let us decide what gets passed to recursive makes.
MAKEOVERRIDES =

# Define this as & to perform parallel make on a Sequent.
# Note that this has some bugs, and it seems currently necessary 
# to compile all the gen* files first by hand to avoid erroneous results.
P =

# How to invoke ranlib.
RANLIB = ranlib
# Test to use to see whether ranlib exists on the system.
RANLIB_TEST = [ -f /usr/bin/ranlib -o -f /bin/ranlib ]

# Compiler to use for compiling libgcc1.a.
# OLDCC should not be the GNU C compiler,
# since that would compile typical libgcc1.a functions such as mulsi3
# into infinite recursions.
OLDCC = cl

# CFLAGS for use with OLDCC, for compiling libgcc1.a.
# NOTE: -O does not work on some Unix systems!
CCLIBFLAGS = -O

# Version of ar to use when compiling libgcc1.a.
OLDAR = ar

# Target to use when installing include directory.  Either
# install-headers-tar or install-headers-cpio.
INSTALL_HEADERS_DIR = install-headers-tar

# Header files that are made available under the same name
# to programs compiled with GCC.
USER_H = $(srcdir)/ginclude/stdarg.h $(srcdir)/ginclude/stddef.h      $(srcdir)/ginclude/varargs.h $(srcdir)/ginclude/va-alpha.h      $(srcdir)/ginclude/va-h8300.h $(srcdir)/ginclude/va-i860.h      $(srcdir)/ginclude/va-i960.h $(srcdir)/ginclude/va-mips.h      $(srcdir)/ginclude/va-m88k.h $(srcdir)/ginclude/va-pa.h      $(srcdir)/ginclude/va-pyr.h $(srcdir)/ginclude/va-sparc.h      $(srcdir)/ginclude/va-clipper.h $(srcdir)/ginclude/va-spur.h      $(srcdir)/ginclude/iso646.h $(srcdir)/ginclude/va-ppc.h      $(srcdir)/ginclude/proto.h $(EXTRA_HEADERS)

# Target to use whe installing assert.h.  Some systems may
# want to set this empty.
INSTALL_ASSERT_H = install-assert-h

# The GCC to use for compiling libgcc2.a, enquire, and libgcc1-test.
# Usually the one we just built.
# Don't use this as a dependency--use $(GCC_PASSES) or $(GCC_PARTS).
GCC_FOR_TARGET = xgcc

# This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.
# It omits XCFLAGS, and specifies -B./.
# It also specifies -I./include to find, e.g., stddef.h.
GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) -I./include

# Special flags for compiling enquire.
# We disable optimization to make floating point more reliable.
ENQUIRE_CFLAGS = -DNO_MEM -DNO_LONG_DOUBLE_IO -O0
ENQUIRE_LDFLAGS =

# Sed command to transform gcc to installed name.  Overwritten by configure.
program_transform_name = -e s,x,x,
program_transform_cross_name = -e s,^,$(target)-,

# Tools to use when building a cross-compiler.
# These are used because `configure' appends `cross-make'
# to the makefile when making a cross-compiler.

TARGET_TOOLPREFIX = $(tooldir)/bin/
AR_FOR_TARGET = $(TARGET_TOOLPREFIX)ar
AR_FOR_TARGET_FLAGS = rc
RANLIB_FOR_TARGET = $(TARGET_TOOLPREFIX)ranlib
RANLIB_TEST_FOR_TARGET = [ -f $(TARGET_TOOLPREFIX)ranlib ]

# Dir to search for system headers.  Overridden by cross-make.
SYSTEM_HEADER_DIR = /usr/include

# Control whether to run fixproto.
STMP_FIXPROTO = stmp-fixproto

# Test to see whether <limits.h> exists in the system header files.
LIMITS_H_TEST = [ -f $(SYSTEM_HEADER_DIR)/limits.h ]

# There may be a premade insn-attrtab.c for this machine.
# (You could rebuild it with genattrtab.exe as usual, but it takes a long time.)
# PREMADE_ATTRTAB is the file name of the file to use.
# PREMADE_ATTRTAB_MD is the md file it corresponds to.
PREMADE_ATTRTAB_MD = Makefile  # Guaranteed not to cmp equal to md.
PREMADE_ATTRTAB = 

target=winnt3.5
out_file=config/mips/mips.c
out_object_file=mips.o
md_file=config/mips/mips.md
tm_file=config/mips/psx.h
build_xm_file=config/i386/xm-winnt.h
host_xm_file=config/i386/xm-winnt.h
version=2.6.3
mainversion=`sed -e 's/.*\"\([0-9]*\.[0-9]*\).*/\1/' < $(srcdir)\version.c`

# Directory where sources are, from where we are.
srcdir = .
# Common prefix for installation directories.
# NOTE: This directory must exist when you start installation.
prefix = /usr/local
# Directory in which to put localized header files. On the systems with
# gcc as the native cc, `local_prefix' may not be `prefix' which is
# `/usr'.
# NOTE: local_prefix *should not* default from prefix.
local_prefix = /usr/local
# Directory in which to put host dependent programs and libraries
exec_prefix = $(prefix)
# Directory in which to put the executable for the command `gcc'
bindir = $(exec_prefix)/bin
# Directory in which to put the directories used by the compiler.
libdir = $(exec_prefix)/lib
# Directory in which the compiler finds executables, libraries, etc.
libsubdir = $(libdir)/gcc-lib/$(target)/$(version)
# Directory in which the compiler finds g++ includes.
gxx_include_dir= $(libdir)/g++-include
# Directory to search for site-specific includes.
includedir = $(local_prefix)/include
# assertdir is overridden in cross-make.
# (But this currently agrees with what is in cross-make.)
assertdir = $(tooldir)/include
# where the info files go
infodir = $(prefix)/info
# Extension (if any) to put in installed man-page filename.
manext = .1
objext = .o
exeext =

# Directory in which to put man pages.
mandir = $(prefix)/man/man1
# Directory in which to find other cross-compilation tools and headers.
# Used in install-cross.
tooldir = $(exec_prefix)/$(target)
# Dir for temp files.
tmpdir = /tmp

# Additional system libraries to link with.
CLIB=

# Change this to a null string if obstacks are installed in the
# system library.
OBSTACK=obstack.o

# Specify the rule for actually making libgcc.a,
LIBGCC = libgcc.a
# and the rule for installing it.
INSTALL_LIBGCC = install-libgcc

# Specify the rule for actually making libgcc1.a.
# The value may be empty; that means to do absolutely nothing
# with or for libgcc1.a.
LIBGCC1 = libgcc1.a

# Specify the rule for making libgcc1.a for a cross-compiler.
# The default rule assumes that libgcc1.a is supplied by the user.
CROSS_LIBGCC1 = libgcc1.cross

# Specify the rule for actually making libgcc2.a.
LIBGCC2 = libgcc2.a

# Options to use when compiling libgcc2.a.
# -g1 causes output of debug info only for file-scope entities.
# we use this here because that should be enough, and also
# so that -g1 will be tested.
LIBGCC2_CFLAGS = -O2 $(LIBGCC2_INCLUDES) $(GCC_CFLAGS) $(TARGET_LIBGCC2_CFLAGS) -g1

# Additional options to use when compiling libgcc2.a.
# Some targets override this to -Iinclude
LIBGCC2_INCLUDES =

# Additional target-dependent options for compiling libgcc2.a.
TARGET_LIBGCC2_CFLAGS = 

# Things which must be built before building libgcc2.a.
# Some targets override this to stmp-int-hdrs
LIBGCC2_DEPS =

# Enquire target (This is a variable so that a target can choose not to
# build it.)
ENQUIRE = enquire.exe

# libgcc1-test target (must also be overridable for a target)
LIBGCC1_TEST = libgcc1-test

# List of extra executables that should be compiled for this target machine
# that are used for compiling from source code to object code.
# The rules for compiling them should be in the t-* file for the machine.
EXTRA_PASSES =

# Like EXTRA_PASSES, but these are used when linking.
EXTRA_PROGRAMS = 

# List of extra object files that should be compiled for this target machine.
# The rules for compiling them should be in the t-* file for the machine.
EXTRA_PARTS =

# List of extra object files that should be compiled and linked with
# compiler proper (cc1, cc1obj, cc1plus).
EXTRA_OBJS =

# List of additional header files to install.
# Often this is edited directly by `configure'.
EXTRA_HEADERS =

# Set this to `ld' to enable use of collect2.
# USE_COLLECT2 =
# It is convenient for configure to add the assignment at the beginning,
# so don't override it here.

# List of extra C and assembler files to add to libgcc1.a.
# Assembler files should have names ending in `.asm'.
LIB1FUNCS_EXTRA = 

# List of extra C and assembler files to add to libgcc2.a.
# Assembler files should have names ending in `.asm'.
LIB2FUNCS_EXTRA = 

# Default float.h source to use for cross-compiler.
CROSS_FLOAT_H=float.h-cross

# Program to convert libraries.
LIBCONVERT = 

# Control whether header files are installed.
INSTALL_HEADERS=install-headers

# Options for tar when copying trees.  So HPUX can override it.
TAROUTOPTS = xpBf

# Select which version of fixincludes to use (I.E. regular versus SVR4)
# This value is overridden directly by configure.
FIXINCLUDES=fixincludes

# Additional directories of header files to run fixincludes on.
# These should be directories searched automatically by default
# just as /usr/include is.
# *Do not* use this for directories that happen to contain 
# header files, but are not searched automatically by default.
# On most systems, this is empty.
OTHER_FIXINCLUDES_DIRS=

# List of things which should already be built whenever we try to use xgcc.exe
# to compile anything (without linking).
GCC_PASSES=xgcc.exe cc1.exe cpp.exe $(EXTRA_PASSES)

# List of things which should already be built whenever we try to use xgcc.exe
# to link anything.
GCC_PARTS=$(GCC_PASSES) $(LIBGCC) $(EXTRA_PROGRAMS) $(USE_COLLECT2) $(EXTRA_PARTS)

# Directory to link to, when using the target `maketest'.
DIR = ../gcc

# Guaranteed to not exist when not passing md through cpp.
# This value is overridden directly by configure.
MD_FILE = md-cpp-not-used

# Flags to use when cross-building GCC.
# Prefix to apply to names of object files when using them
# to run on the machine we are compiling on.
HOST_PREFIX=
# Prefix to apply to names of object files when compiling them
# to run on the machine we are compiling on.
# The default for this variable is chosen to keep these rules 
# out of the way of the other rules for compiling the same source files.
HOST_PREFIX_1=loser-
HOST_CC=$(CC)
HOST_CFLAGS=$(ALL_CFLAGS)
HOST_CLIB=$(CLIB)
HOST_LDFLAGS=$(LDFLAGS)
HOST_CPPFLAGS=$(ALL_CPPFLAGS)
HOST_ALLOCA=$(ALLOCA)
HOST_MALLOC=$(MALLOC)
HOST_OBSTACK=$(OBSTACK)

# Actual name to use when installing a native compiler.
GCC_INSTALL_NAME = `t='$(program_transform_name)'; echo gcc | sed $$t`

# Actual name to use when installing a cross-compiler.
GCC_CROSS_NAME = `t='$(program_transform_cross_name)'; echo gcc | sed $$t`

# Choose the real default target.
ALL=all.internal

# Choose the real install target.
INSTALL_TARGET=install-normal

# Source for float.h.  Overridden by cross-make.
FLOAT_H=float.h-nat

# Extra symbols for fixproto to define when parsing headers.
FIXPROTO_DEFINES = 

# Extra flags to use when compiling crt{begin,end}.o.
CRTSTUFF_T_CFLAGS = 

# End of variables for you to override.

# Definition of `all' is here so that new rules inserted by sed
# do not specify the default target.
# The real definition is under `all.internal' (for native compilers)
# or `all.cross' (for cross compilers).
all: all.indirect

# This tells GNU Make version 3 not to put all variables in the environment.
.NOEXPORT:

# sed inserts variable overrides after the following line.
CC = cl 
CLIB = libc.lib kernel32.lib 
CFLAGS = -Di386 -DWINNT -D_WINNT_ -DWIN32 -D_WIN32 -D_M_IX86=300 -D_X86_=1   -D__MSDOS__ -DALMOST_STDC -D_MSC_VER=800 -Fo$@ -Ox -DSNPSX
LDFLAGS = -align:0x1000 -subsystem:console -entry:mainCRTStartup   -stack:4000000,1000 

EXTRA_OBJS=

STMP_FIXPROTO = 
OTHER_FIXINCLUDES_DIRS=. 
RANLIB = : 
RANLIB_TEST = false 
OLDCC = cl 
MAKE = nmake 
SYMLINK = copy 
INSTALL = $(srcdir)/install.sh -c 
exeext = .exe 
objext = .o 
oldobjext = .o 

EXTRA_PROGRAMS=ld.exe 

ld.o: $(srcdir)/config/winnt/ld.c 
	$(CC) $(CFLAGS)   	-I. -I$(srcdir) -I$(srcdir)/config -c $(srcdir)/config/winnt/ld.c 

ld.exe: ld.o 
	link -out:ld.exe ld.o $(LDFLAGS) $(CLIB) 

####target overrides
####host overrides
####cross overrides
####build overrides

# Now figure out from those variables how to compile and link.

all.indirect: $(ALL)

# IN_GCC tells obstack.h that we are using gcc's <stddef.h> file.
# ??? IN_GCC should be obsolete now.
INTERNAL_CFLAGS = $(CROSS) -DIN_GCC

# This is the variable actually used when we compile.
ALL_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) $(XCFLAGS)

# Likewise.
ALL_CPPFLAGS = $(CPPFLAGS) $(X_CPPFLAGS) $(T_CPPFLAGS)

# Even if ALLOCA is set, don't use it if compiling with GCC.
USE_ALLOCA=alloca.o
# USE_ALLOCA= ` case "${CC}" in "${OLDCC}") echo "${ALLOCA}" ;; esac `
USE_HOST_ALLOCA=alloca.o
# USE_HOST_ALLOCA= ` case "$(HOST_CC)"@"${HOST_ALLOCA}" in "${OLDCC}"@?*) echo ${HOST_PREFIX}${HOST_ALLOCA} ;; esac `
# USE_HOST_MALLOC= ` case "${HOST_MALLOC}" in ?*) echo ${HOST_PREFIX}${HOST_MALLOC} ;; esac `
USE_HOST_OBSTACK=obstack.o
# USE_HOST_OBSTACK= ` case "${HOST_OBSTACK}" in ?*) echo ${HOST_PREFIX}${HOST_OBSTACK} ;; esac `

# Dependency on obstack, alloca, malloc or whatever library facilities
# are not installed in the system libraries.
# We don't use USE_ALLOCA because backquote expansion doesn't work in deps.
LIBDEPS= $(OBSTACK) $(ALLOCA) $(MALLOC)

# Likewise, for use in the tools that must run on this machine
# even if we are cross-building GCC.
# We don't use USE_ALLOCA because backquote expansion doesn't work in deps.
HOST_LIBDEPS= $(HOST_PREFIX)$(HOST_OBSTACK) $(HOST_PREFIX)$(HOST_ALLOCA) $(HOST_PREFIX)$(HOST_MALLOC)

# How to link with both our special library facilities
# and the system's installed libraries.
LIBS = $(OBSTACK) $(USE_ALLOCA) $(MALLOC) $(CLIB)

# Likewise, for use in the tools that must run on this machine
# even if we are cross-building GCC.
HOST_LIBS = $(USE_HOST_OBSTACK) $(USE_HOST_ALLOCA) $(USE_HOST_MALLOC)   	    $(HOST_CLIB)

HOST_RTL = $(HOST_PREFIX)rtl.o
HOST_RTLANAL = $(HOST_PREFIX)rtlanal.o
HOST_PRINT = $(HOST_PREFIX)print-rtl.o

# Specify the directories to be searched for header files.
# Both . and srcdir are used, in that order,
# so that tm.h and config.h will be found in the compilation
# subdirectory rather than in the source directory.
INCLUDES = -I. -I$(srcdir) -I$(srcdir)/config

# Always use -I$(srcdir)/config when compiling.
.c.o :
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<

# This tells GNU make version 3 not to export all the variables
# defined in this file into the environment.
.NOEXPORT:

# Support for additional languages (other than c and objc).
# ??? objc can be supported this way too (leave for later).

# These next lines are overridden by configure.
LANG_MAKEFILES =
LANG_STAGESTUFF =
LANG_DIFF_EXCLUDES =

# Flags to pass to recursive makes.
# CC is set by configure.  Hosts without symlinks need special handling
# because we need CC="stage1/xgcc.exe -Bstage1/" to work in the language
# subdirectories.
# ??? The choices here will need some experimenting with.
FLAGS_TO_PASS =  	"AR_FLAGS=$(AR_FLAGS)"  	"AR_FOR_TARGET=$(AR_FOR_TARGET)"  	"BISON=$(BISON)"  	"BISONFLAGS=$(BISONFLAGS)"  	"CC=set-by-configure"  	"CFLAGS=$(CFLAGS)"  	"GCC_FOR_TARGET=$(GCC_FOR_TARGET)"  	"LDFLAGS=$(LDFLAGS)"  	"LEX=$(LEX)"  	"LEXFLAGS=$(LEXFLAGS)"  	"MAKEINFO=$(MAKEINFO)"  	"MAKEINFOFLAGS=$(MAKEINFOFLAGS)"  	"RANLIB_FOR_TARGET=$(RANLIB_FOR_TARGET)"  	"RANLIB_TEST_FOR_TARGET=$(RANLIB_TEST_FOR_TARGET)"  	"SHELL=$(SHELL)"  	"exeext=$(exeext)"  	"objext=$(objext)"  	"exec_prefix=$(exec_prefix)"  	"prefix=$(prefix)"  	"tooldir=$(tooldir)"  	"bindir=$(bindir)"  	"libsubdir=$(libsubdir)"

# Lists of files for various purposes.

# A list of all the language-specific executables.
# This is overridden by configure.
COMPILERS = cc1$(exeext) cc1obj$(exeext)

# Language-specific object files for C.
C_OBJS = c-parse.o c-lang.o c-lex.o c-pragma.o     c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o c-iterate.o

# Language-specific object files for Objective C.
OBJC_OBJS = objc-parse.o objc-act.o c-lex.o c-pragma.o     c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o c-iterate.o

# Files specific to the C interpreter bytecode compiler(s).
BC_OBJS = bc-emit.o bc-optab.o

# Bytecode header files constructed at build time; vmsconfig.com wants this.
BC_ALL = bc-arity.h bc-opcode.h bc-opname.h

# Language-independent object files.
OBJS = toplev.o version.o tree.o print-tree.o stor-layout.o fold-const.o   function.o stmt.o expr.o calls.o expmed.o explow.o optabs.o varasm.o   rtl.o print-rtl.o rtlanal.o emit-rtl.o real.o   dbxout.o sdbout.o dwarfout.o xcoffout.o   integrate.o jump.o cse.o loop.o unroll.o flow.o stupid.o combine.o   regclass.o local-alloc.o global.o reload.o reload1.o caller-save.o   insn-peep.o reorg.o sched.o final.o recog.o reg-stack.o   insn-opinit.o insn-recog.o insn-extract.o insn-output.o insn-emit.o   insn-attrtab.o $(out_object_file) getpwd.o convert.o $(EXTRA_OBJS)

# GEN files are listed separately, so they can be built before doing parallel
#  makes for cc1.exe or cc1plus.  Otherwise sequent parallel make attempts to load
#  them before rtl.o is compiled.
GEN= genemit.exe genoutput genrecog.exe genextract genflags.exe gencodes genconfig.exe genpeep.exe

CCCP=cccp
# Uncomment this line if you want to use cppmain (w/cpplib) as cpp.
#CCCP=cppmain

# Files to be copied away after each stage in building.
STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h   insn-output.c insn-recog.c insn-emit.c insn-extract.c insn-peep.c   insn-attr.h insn-attrtab.c insn-opinit.c   stamp-flags stamp-config stamp-codes   stamp-output stamp-recog stamp-emit stamp-extract stamp-peep   stamp-attr stamp-attrtab stamp-opinit stamp-proto stamp-crt stamp-crtS   genemit$(exeext) genoutput$(exeext) genrecog$(exeext) genextract$(exeext)   genflags$(exeext) gencodes$(exeext) genconfig$(exeext) genpeep$(exeext)   genattrtab$(exeext) genattr$(exeext) genopinit$(exeext)   $(BC_ALL)   stamp-bcarity stamp-bcopcode stamp-bcopname   bi-arity$(exeext) bi-opcode$(exeext) bi-opname$(exeext)   $(GCC_PASSES) $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext)   $(CCCP)$(exeext) cc1obj$(exeext) enquire$(exeext)   protoize$(exeext) unprotoize$(exeext)   specs collect2$(exeext) $(USE_COLLECT2) underscore.c   *.greg *.lreg *.combine *.flow *.cse *.jump *.rtl *.tree *.loop   *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack   *.[si]   $(LANG_STAGESTUFF)

# Members of libgcc1.a.
LIB1FUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3     _lshrsi3 _ashrsi3 _ashlsi3     _divdf3 _muldf3 _negdf2 _adddf3 _subdf3     _fixdfsi _fixsfsi _floatsidf _floatsisf _truncdfsf2 _extendsfdf2     _addsf3 _negsf2 _subsf3 _mulsf3 _divsf3     _eqdf2 _nedf2 _gtdf2 _gedf2 _ltdf2 _ledf2     _eqsf2 _nesf2 _gtsf2 _gesf2 _ltsf2 _lesf2

# Library members defined in libgcc2.c.
LIB2FUNCS = _muldi3 _divdi3 _moddi3 _udivdi3 _umoddi3 _negdi2       _lshrdi3 _ashldi3 _ashrdi3 _ffsdi2      _udiv_w_sdiv _udivmoddi4 _cmpdi2 _ucmpdi2 _floatdidf _floatdisf      _fixunsdfsi _fixunssfsi _fixunsdfdi _fixdfdi _fixunssfdi _fixsfdi      _fixxfdi _fixunsxfdi _floatdixf _fixunsxfsi      _fixtfdi _fixunstfdi _floatditf      __gcc_bcmp _varargs _eprintf _op_new _op_vnew _new_handler _op_delete      _op_vdel _bb _shtab _clear_cache _trampoline __main _exit _ctors _eh      _pure

# The files that "belong" in CONFIG_H are deliberately omitted
# because having them there would not be useful in actual practice.
# All they would do is cause complete recompilation every time
# one of the machine description files is edited.
# That may or may not be what one wants to do.
# If it is, rm *.o is an easy way to do it.
# CONFIG_H = $(host_xm_file) $(tm_file)
CONFIG_H =
RTL_H = rtl.h rtl.def machmode.h machmode.def
TREE_H = tree.h real.h tree.def machmode.h machmode.def
BYTECODE_H = bytecode.h bc-emit.h bc-optab.h

# Language makefile fragments.

# The following targets define the interface between us and the languages.
#
# all.build, all.cross, start.encap, rest.encap,
# info, dvi,
# install-normal, install-common, install-info, install-man,
# uninstall, distdir,
# mostlyclean, clean, distclean, extraclean, maintainer-clean,
# stage1, stage2, stage3, stage4
#
# Each language is linked in with a series of hooks (since we can't use `::'
# targets).  The name of each hooked is "lang.${target_name}" (eg: lang.info).
# Configure computes and adds these here.

####language hooks

# sed inserts language fragments after the following line.
####language fragments

# End of language makefile fragments.

# Avoid a lot of time thinking about remaking Makefile.in and *.def.
.SUFFIXES: .in .def


all.internal: start.encap rest.encap
# This is what to compile if making a cross-compiler.
# Note that we can compile enquire.exe using the cross-compiler just built,
# although we can't run it on this machine.
all.cross: native gcc-cross specs stmp-headers $(LIBGCC) $(STMP_FIXPROTO)  	$(LIBGCC1_TEST) $(EXTRA_PARTS) lang.all.cross
# This is what to compile if making gcc with a cross-compiler.
all.build: native xgcc.exe $(EXTRA_PARTS) lang.all.build
# This is what must be made before installing GCC and converting libraries.
start.encap: native xgcc.exe specs $(LIBGCC1) xlimits.h lang.start.encap
# These can't be made until after GCC can run.
rest.encap: stmp-headers $(LIBGCC) $(STMP_FIXPROTO) $(EXTRA_PARTS) lang.rest.encap
# This is what is made with the host's compiler
# whether making a cross compiler or not.
native:  cpp.exe $(LANGUAGES) $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)

# Define the names for selecting languages in LANGUAGES.
Cc: cc1.exe
OBJC objc: cc1obj.exe objc-runtime
OBJECTIVE-C objective-c: cc1obj.exe objc-runtime
PROTO: proto

# Tell GNU make these are phony targets.
.PHONY: C c OBJC objc OBJECTIVE-C objective-c PROTO proto

# Really, really stupid make features, such as SUN's KEEP_STATE, may force
# a target to build even if it is up-to-date.  So we must verify that
#  does not exist before failing.

# On the target machine, finish building a cross compiler.
# This does the things that can't be done on the host machine.
rest.cross: $(LIBGCC) gfloat.h specs

# Verify that it works to compile and link libgcc1-test.
# If it does, then there are sufficient replacements for libgcc1.a.
libgcc1-test: libgcc1-test.o native $(GCC_PARTS)
	@echo "Testing libgcc1.  Ignore linker warning messages."
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) libgcc1-test.o -o libgcc1-test  	  -nostartfiles -nostdlib `$(GCC_FOR_TARGET) --print-libgcc-file-name`
libgcc1-test.o : libgcc1-test.c native xgcc.exe
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) -c $(srcdir)/libgcc1-test.c

# Recompile all the language-independent object files.
# This is used only if the user explicitly asks for it.
compilations: $(OBJS)

# Create a list of the language-independent object files so the language
# subdirectories needn't mention their names explicitly.
stamp-objlist: psx-Makefile $(OBJS) $(BC_OBJS)
	echo. $(OBJS) $(BC_OBJS) | sed -e "s, \([a-z]\), ../\1,g" >stamp-objlist

# We call this executable `xgcc' rather than `gcc'
# to avoid confusion if the current directory is in the path
# and CC is `gcc'.  It is renamed to `gcc' when it is installed.
xgcc.exe : gcc.o version.o $(LIBDEPS)
	link $(LDFLAGS) -out:$@ gcc.o version.o $(LIBS)

# Dump a specs file to make -B./ read these specs over installed ones.
specs: xgcc.exe
	$(GCC_FOR_TARGET) -dumpspecs > tmp-specs
	mv tmp-specs specs

# We do want to create an executable named `xgcc', so we can use it to
# compile libgcc2.a.
# Also create gcc-cross, so that install-common will install properly.
gcc-cross: xgcc.exe
	cp xgcc$(exeext) gcc-cross$(exeext)

cc1.exe : $(P) $(C_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)
	link $(LDFLAGS) -out:$@ @psx-link.rsp $(LIBS)

cc1obj.exe : $(P) $(OBJC_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)
	link $(LDFLAGS) -out:$@ $(OBJC_OBJS) $(OBJS) $(BC_OBJS) $(LIBS)

# Copy float.h from its source.
gfloat.h: $(FLOAT_H)
	-del gfloat.h
	cp $(FLOAT_H) gfloat.h

# Create float.h source for the native machine.
float.h-nat: enquire.exe
	-./enquire.exe -f > tmp-float.h
	mv tmp-float.h float.h-nat

# Create a dummy float.h source for a cross-compiler.
float.h-cross:
	echo "#error float.h values not known for cross-compiler" > t-float.h-cross
	mv t-float.h-cross float.h-cross

# Used to compile enquire.exe with standard cc, but have forgotten why.
# Let's try with GCC.
enquire.exe : enquire.o 
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ENQUIRE_LDFLAGS) enquire.o -o $@
enquire.o : $(srcdir)/enquire.c  stmp-int-hdrs
# Breaking this line caused a problem with one version of GNU make.
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(ENQUIRE_CFLAGS) -I. -c $(srcdir)/enquire.c

# Build the version of limits.h that we will install.
xlimits.h: glimits.h limitx.h limity.h
	if $(LIMITS_H_TEST) ; then  	  cat $(srcdir)/limitx.h $(srcdir)/glimits.h $(srcdir)/limity.h > tmp-xlimits.h;  	else  	  cat $(srcdir)/glimits.h > tmp-xlimits.h;  	fi
	mv tmp-xlimits.h xlimits.h

# Build libgcc.a

libgcc.lib : libgcc1.c libgcc2.c mklibgcc.exe
	mklibgcc -c
	mklibgcc "cl -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)" libgcc1.c $(LIB1FUNCS)
	mklibgcc "xgcc -B./ -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)" libgcc2.c $(LIB2FUNCS)
	mklibnow.bat
	-del libgcc.lib
	lib -verbose -out:libgcc.lib lgcctmp/*.o

mklibgcc.o : $(srcdir)/config/winnt/mklibgcc.c
	cl -I. -I$(srcdir) -I$(srcdir)/config/winnt -c $(srcdir)/config/winnt/mklibgcc.c

dirent.o : $(srcdir)/config/winnt/dirent.c stmp-int-hdrs
	cl -I. -I$(srcdir) -I$(srcdir)/include -I$(srcdir)/config/winnt -c $(srcdir)/config/winnt/dirent.c

mklibgcc.exe : mklibgcc.o dirent.o
	cl mklibgcc.o dirent.o libc.lib kernel32.lib

# Compiling object files from source files.

# Note that dependencies on obstack.h are not written
# because that file is not part of GCC.

# C language specific files.

c-parse.o : c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h      c-parse.h c-tree.h input.h flags.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c c-parse.c
c-parse.h: c-parse.c
c-parse.c: c-parse.y
	 $(BISON) $(BISONFLAGS) -d c-parse.y -o c-parse.c
c-parse.y: c-parse.in
	sed -e "/^ifobjc$$/,/^end ifobjc$$/d"  	  -e "/^ifc$$/d" -e "/^end ifc$$/d"  	  c-parse.in >tmp-c-parse.y
	copy tmp-c-parse.y c-parse.y

c-gperf.h: c-parse.gperf
	gperf -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$$  	   c-parse.gperf >tmp-gperf.h
	 copy tmp-gperf.h c-gperf.h

c-decl.obj : c-decl.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h flags.h
c-typeck.obj : c-typeck.c $(CONFIG_H) $(TREE_H) c-tree.h flags.h
c-lang.obj : c-lang.c $(CONFIG_H) $(TREE_H)
c-lex.obj : c-lex.c $(CONFIG_H) $(TREE_H) c-lex.h c-tree.h $(srcdir)/c-parse.h \
    input.h flags.h $(srcdir)/c-gperf.h
c-aux-info.obj : c-aux-info.c  $(CONFIG_H) $(TREE_H) c-tree.h flags.h
c-convert.obj : c-convert.c $(CONFIG_H) $(TREE_H) flags.h
c-pragma.obj : c-pragma.c $(CONFIG_H) $(TREE_H)
c-iterate.obj : c-iterate.c $(CONFIG_H) $(TREE_H) $(RTL_H) c-tree.h flags.h

# To make a configuration always use collect2, set USE_COLLECT2 to ld.
ld: collect2
	del ld$(exeext)
	ln collect2$(exeext) ld$(exeext) > NUL 2>&1  	   || copy collect2$(exeext) ld$(exeext)

collect2 : collect2.o cplus-dem.o underscore.o version.o $(LIBDEPS)
# Don't try modifying collect2 (aka ld) in place--it might be linking this.
	-del collect2$(exeext)
	link $(LDFLAGS) -out:$@ collect2.o  	  cplus-dem.o underscore.o version.o $(LIBS)

collect2.o : collect2.c $(CONFIG_H) gstab.h obstack.h demangle.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)   	-DTARGET_MACHINE=\"$(target)\" $(MAYBE_USE_COLLECT2)  	-c collect2.c

cplus-dem.o : cplus-dem.c demangle.h

underscore.c: stamp-under 

stamp-under: $(GCC_PASSES)
	echo "int xxy_us_dummy;" >tmp-dum.c
	$(GCC_FOR_TARGET) -S tmp-dum.c
	echo '/*WARNING: This file is automatically generated!*/' >tmp-under.c
	if grep _xxy_us_dummy tmp-dum.s > NUL ; then  	  echo "int prepends_underscore = 1;" >>tmp-under.c;  	else  	  echo "int prepends_underscore = 0;" >>tmp-under.c;  	fi
	copy tmp-under.c underscore.c
	-del tmp-dum.c tmp-dum.s
	echo > stamp-under

# Objective C language specific files.

objc-parse.o : $(srcdir)/objc-parse.c $(CONFIG_H) $(TREE_H) c-lex.h     c-tree.h input.h flags.h objc-act.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/objc-parse.c
$(srcdir)/objc-parse.c : objc-parse.y
	 $(BISON) $(BISONFLAGS) objc-parse.y -o objc-parse.c
objc-parse.y: c-parse.in
	sed -e "/^ifc$$/,/^end ifc$$/d"  	  -e "/^ifobjc$$/d" -e "/^end ifobjc$$/d"  	  c-parse.in >tmp-objc-prs.y
	copy tmp-objc-prs.y objc-parse.y

objc-act.o : objc-act.c $(CONFIG_H) $(TREE_H) $(RTL_H) c-tree.h c-lex.h     flags.h objc-act.h input.h function.h c-parse.h

# A file used by all variants of C.

c-common.o : c-common.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h flags.h

# Language-independent files.

gcc.o : gcc.c $(CONFIG_H) multilib.h  $(lang_specs_files)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)    -DSTANDARD_STARTFILE_PREFIX=\"$(libdir)/\"    -DSTANDARD_EXEC_PREFIX=\"$(libdir)/gcc-lib/\"    -DDEFAULT_TARGET_VERSION=\"$(version)\"    -DDEFAULT_TARGET_MACHINE=\"$(target)\"    -DTOOLDIR_BASE_PREFIX=\"$(exec_prefix)/\"    $(MAYBE_TARGET_DEFAULT)    -c gcc.c

dumpvers: dumpvers.c

version.o : version.c
obstack.o : obstack.c

convert.o : convert.c $(CONFIG_H) $(TREE_H) flags.h convert.h

tree.o : tree.c $(CONFIG_H) $(TREE_H) flags.h function.h
print-tree.o : print-tree.c $(CONFIG_H) $(TREE_H)
stor-layout.o : stor-layout.c $(CONFIG_H) $(TREE_H) flags.h function.h
fold-const.o : fold-const.c $(CONFIG_H) $(TREE_H) flags.h 
toplev.o : toplev.c $(CONFIG_H) $(TREE_H) $(RTL_H) bytecode.h bc-emit.h     flags.h input.h insn-attr.h xcoffout.h defaults.h output.h     $(lang_options_files)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)  	  $(MAYBE_TARGET_DEFAULT) $(MAYBE_USE_COLLECT2)  	  -c toplev.c

rtl.o : rtl.c $(CONFIG_H) $(RTL_H)

print-rtl.o : print-rtl.c $(CONFIG_H) $(RTL_H)
rtlanal.o : rtlanal.c $(CONFIG_H) $(RTL_H)

varasm.o : varasm.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h function.h     defaults.h insn-codes.h expr.h hard-reg-set.h regs.h xcoffout.h     output.h bytecode.h
function.o : function.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h      insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h     recog.h output.h bytecode.h
stmt.o : stmt.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h      insn-flags.h insn-config.h insn-codes.h hard-reg-set.h expr.h loop.h     recog.h bytecode.h bc-typecd.h bc-typecd.def bc-opcode.h bc-optab.h     bc-emit.h
expr.o : expr.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h regs.h     insn-flags.h insn-codes.h expr.h insn-config.h recog.h output.h     typeclass.h bytecode.h bc-opcode.h bc-typecd.h bc-typecd.def bc-optab.h     bc-emit.h modemap.def
calls.o : calls.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h expr.h insn-codes.h     insn-flags.h
expmed.o : expmed.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h      insn-flags.h insn-config.h insn-codes.h expr.h recog.h real.h
explow.o : explow.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h hard-reg-set.h     insn-config.h expr.h recog.h insn-flags.h insn-codes.h
optabs.o : optabs.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h      insn-flags.h insn-config.h insn-codes.h expr.h recog.h reload.h
dbxout.o : dbxout.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h regs.h     insn-config.h reload.h gstab.h xcoffout.h defaults.h output.h
sdbout.o : sdbout.c $(CONFIG_H) $(TREE_H) $(RTL_H) gsyms.h flags.h     insn-config.h reload.h
dwarfout.o : dwarfout.c $(CONFIG_H) $(TREE_H) $(RTL_H) dwarf.h flags.h     insn-config.h reload.h output.h defaults.h
xcoffout.o : xcoffout.c $(CONFIG_H) $(TREE_H) $(RTL_H) xcoffout.h flags.h
emit-rtl.o : emit-rtl.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h     function.h regs.h insn-config.h insn-codes.h real.h expr.h bytecode.h     bc-opcode.h bc-typecd.h bc-typecd.def bc-optab.h bc-emit.h bc-opname.h
real.o : real.c $(CONFIG_H) $(TREE_H)
getpwd.o : getpwd.c $(CONFIG_H)

integrate.o : integrate.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h integrate.h     insn-flags.h insn-config.h insn-codes.h expr.h real.h function.h     bytecode.h

jump.o : jump.c $(CONFIG_H) $(RTL_H) flags.h hard-reg-set.h regs.h     insn-config.h insn-flags.h insn-codes.h expr.h real.h
stupid.o : stupid.c $(CONFIG_H) $(RTL_H) regs.h hard-reg-set.h flags.h

cse.o : cse.c $(CONFIG_H) $(RTL_H) regs.h hard-reg-set.h flags.h real.h     insn-config.h recog.h
loop.o : loop.c $(CONFIG_H) $(RTL_H) flags.h loop.h insn-config.h     insn-flags.h insn-codes.h regs.h hard-reg-set.h recog.h expr.h real.h
unroll.o : unroll.c $(CONFIG_H) $(RTL_H) insn-config.h insn-codes.h     integrate.h regs.h flags.h expr.h loop.h
flow.o : flow.c $(CONFIG_H) $(RTL_H) flags.h insn-config.h     basic-block.h regs.h hard-reg-set.h output.h
combine.o : combine.c $(CONFIG_H) $(RTL_H) flags.h      insn-config.h insn-flags.h insn-codes.h insn-attr.h regs.h expr.h     basic-block.h recog.h real.h hard-reg-set.h
regclass.o : regclass.c $(CONFIG_H) $(RTL_H) hard-reg-set.h flags.h     basic-block.h regs.h insn-config.h recog.h reload.h real.h bytecode.h
local-alloc.o : local-alloc.c $(CONFIG_H) $(RTL_H) flags.h basic-block.h     regs.h hard-reg-set.h insn-config.h recog.h output.h
global.o : global.c $(CONFIG_H) $(RTL_H) flags.h      basic-block.h regs.h hard-reg-set.h insn-config.h output.h

reload.o : reload.c $(CONFIG_H) $(RTL_H) flags.h output.h     reload.h recog.h hard-reg-set.h insn-config.h insn-codes.h regs.h real.h
reload1.o : reload1.c $(CONFIG_H) $(RTL_H) real.h flags.h expr.h     reload.h regs.h hard-reg-set.h insn-config.h insn-flags.h insn-codes.h     basic-block.h recog.h output.h
caller-save.o : caller-save.c $(CONFIG_H) $(RTL_H) flags.h     regs.h hard-reg-set.h insn-codes.h insn-config.h basic-block.h recog.h     reload.h expr.h
reorg.o : reorg.c $(CONFIG_H) $(RTL_H) conditions.h hard-reg-set.h     basic-block.h regs.h insn-config.h insn-attr.h insn-flags.h recog.h     flags.h output.h
sched.o : sched.c $(CONFIG_H) $(RTL_H) basic-block.h regs.h hard-reg-set.h     flags.h insn-config.h insn-attr.h
final.o : final.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h regs.h     recog.h conditions.h insn-config.h insn-attr.h real.h output.h     hard-reg-set.h insn-flags.h insn-codes.h gstab.h xcoffout.h defaults.h
recog.o : recog.c $(CONFIG_H) $(RTL_H)      regs.h recog.h hard-reg-set.h flags.h insn-config.h insn-attr.h     insn-flags.h insn-codes.h real.h
reg-stack.o : reg-stack.c $(CONFIG_H) $(RTL_H) $(TREE_H)     regs.h hard-reg-set.h flags.h insn-config.h

$(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H)     $(RTL_H) regs.h hard-reg-set.h real.h insn-config.h conditions.h     insn-flags.h output.h insn-attr.h insn-codes.h
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(out_file)

# Build auxiliary files that support ecoff format.
mips-tfile: mips-tfile.o version.o $(LIBDEPS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ mips-tfile.o version.o $(LIBS)

mips-tfile.o : mips-tfile.c $(CONFIG_H) $(RTL_H)

mips-tdump: mips-tdump.o version.o $(LIBDEPS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ mips-tdump.o version.o $(LIBS)

mips-tdump.o : mips-tdump.c $(CONFIG_H) $(RTL_H)

# Build file to support OSF/rose half-pic format.
halfpic.o : halfpic.c $(CONFIG_H) $(RTL_H) $(TREE_H)

# Normally this target is not used; but it is used if you
# define ALLOCA=alloca.o.  In that case, you must get a suitable alloca.c
# from the GNU Emacs distribution.
alloca.o :	alloca.c
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(ALLOCA_FLAGS)  	  -c alloca.c
	$(ALLOCA_FINISH)

# Generate header and source files from the machine description, 
# and compile them.

.PRECIOUS: insn-config.h insn-flags.h insn-codes.h    insn-emit.c insn-recog.c insn-extract.c insn-output.c insn-peep.c    insn-attr.h insn-attrtab.c

# The following pair of rules has this effect:
# genconfig.exe is run only if the md has changed since genconfig.exe was last run;
# but the file insn-config.h is touched only when its contents actually change.

# Each of the other insn-* files is handled by a similar pair of rules.

# This causes an anomaly in the results of make -n
# because insn-* is older than stamp-*
# and thus make -n thinks that insn-* will be updated
# and force recompilation of things that depend on it.
# We use move-if-change precisely to avoid such recompilation.
# But there is no way to teach make -n that it will be avoided.

# Each of the insn-*.[ch] rules has a semicolon at the end,
# for otherwise the system Make on SunOS 4.1 never tries
# to recompile insn-*.o.  To avoid problems and extra noise from
# versions of make which don't like empty commands (nothing after the
# trailing `;'), we call true for each.

insn-config.h: stamp-config 
stamp-config : $(md_file) genconfig.exe
	genconfig $(md_file) > tmp-config.h
	copy tmp-config.h insn-config.h
	echo > stamp-config

insn-flags.h: stamp-flags 
stamp-flags : $(md_file) genflags.exe
	genflags $(md_file) > tmp-flags.h
	copy tmp-flags.h insn-flags.h
	echo > stamp-flags

insn-codes.h: stamp-codes 
stamp-codes : $(md_file) gencodes.exe
	gencodes $(md_file) > tmp-codes.h
	copy tmp-codes.h insn-codes.h
	echo > stamp-codes

insn-emit.o : insn-emit.c $(CONFIG_H) $(RTL_H) expr.h real.h output.h    insn-config.h insn-flags.h insn-codes.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-emit.c

insn-emit.c: stamp-emit 
stamp-emit : $(md_file) genemit.exe
	genemit $(md_file) > tmp-emit.c
	copy tmp-emit.c insn-emit.c
	echo > stamp-emit

insn-recog.o : insn-recog.c $(CONFIG_H) $(RTL_H) insn-config.h recog.h    real.h output.h flags.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-recog.c

insn-recog.c: stamp-recog 
stamp-recog : $(md_file) genrecog.exe
	genrecog $(md_file) > tmp-recog.c
	copy tmp-recog.c insn-recog.c
	echo > stamp-recog

insn-opinit.o : insn-opinit.c $(CONFIG_H) $(RTL_H) insn-codes.h insn-flags.h    insn-config.h flags.h rtl.h recog.h expr.h reload.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-opinit.c

insn-opinit.c: stamp-opinit 
stamp-opinit : $(md_file) genopinit.exe
	genopinit $(md_file) > tmp-opinit.c
	copy tmp-opinit.c insn-opinit.c
	echo > stamp-opinit

insn-extract.o : insn-extract.c $(CONFIG_H) $(RTL_H)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-extract.c

insn-extract.c: stamp-extract 
stamp-extract : $(md_file) genextract.exe
	genextract $(md_file) > tmp-extract.c
	copy tmp-extract.c insn-extract.c
	echo > stamp-extract

insn-peep.o : insn-peep.c $(CONFIG_H) $(RTL_H) regs.h output.h real.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-peep.c

insn-peep.c: stamp-peep 
stamp-peep : $(md_file) genpeep.exe
	genpeep $(md_file) > tmp-peep.c
	copy tmp-peep.c insn-peep.c
	echo > stamp-peep

insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(RTL_H) regs.h real.h output.h       insn-attr.h insn-config.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-attrtab.c

insn-attr.h: stamp-attr 
stamp-attr : $(md_file) genattr.exe
	genattr $(md_file) > tmp-attr.h
	copy tmp-attr.h insn-attr.h
	echo > stamp-attr

insn-attrtab.c: stamp-attrtab 
stamp-attrtab : $(md_file) genattrtab.exe
	  genattrtab $(md_file) > tmp-attrtab.c
	copy tmp-attrtab.c insn-attrtab.c
	echo > stamp-attrtab

insn-output.o : insn-output.c $(CONFIG_H) $(RTL_H) regs.h real.h conditions.h      hard-reg-set.h insn-config.h insn-flags.h insn-attr.h output.h recog.h      insn-codes.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-output.c

insn-output.c: stamp-output 
stamp-output : $(md_file) genoutput.exe
	genoutput $(md_file) > tmp-output.c
	copy tmp-output.c insn-output.c
	echo > stamp-output

# Compile the programs that generate.exe insn-* from the machine description.
# They are compiled with $(HOST_CC), and associated libraries,
# since they need to run on this machine
# even if GCC is being compiled to run on some other machine.

# $(CONFIG_H) is omitted from the deps of the gen*.o
# because these programs don't really depend on anything 
# about the target machine.  They do depend on config.h itself,
# since that describes the host machine.

# Pass the md file through cpp.exe if the target requests it.
$(MD_FILE): $(MD_DEPS)
	del $@
	$(MD_CPP) $(MD_CPPFLAGS) $(md_file) | sed 's/^# /; /g' > tmp-$@
	mv tmp-$@ $@

genconfig.exe : genconfig.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	  genconfig.o $(HOST_RTL) $(HOST_LIBS)

genconfig.o : genconfig.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genconfig.c

genflags.exe : genflags.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genflags.o $(HOST_RTL) $(HOST_LIBS)

genflags.o : genflags.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genflags.c

gencodes.exe : gencodes.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 gencodes.o $(HOST_RTL) $(HOST_LIBS)

gencodes.o : gencodes.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/gencodes.c

genemit.exe : genemit.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genemit.o $(HOST_RTL) $(HOST_LIBS)

genemit.o : genemit.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genemit.c

genopinit.exe : genopinit.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genopinit.o $(HOST_RTL) $(HOST_LIBS)

genopinit.o : genopinit.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genopinit.c

genrecog.exe : genrecog.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genrecog.o $(HOST_RTL) $(HOST_LIBS)

genrecog.o : genrecog.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genrecog.c

genextract.exe : genextract.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genextract.o $(HOST_RTL) $(HOST_LIBS)

genextract.o : genextract.c $(RTL_H) $(build_xm_file) insn-config.h
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genextract.c

genpeep.exe : genpeep.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genpeep.o $(HOST_RTL) $(HOST_LIBS)

genpeep.o : genpeep.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genpeep.c

genattr.exe : genattr.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genattr.o $(HOST_RTL) $(HOST_LIBS)

genattr.o : genattr.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattr.c

genattrtab.exe : genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_RTLANAL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_RTLANAL) $(HOST_LIBS)

genattrtab.o : genattrtab.c $(RTL_H)  $(build_xm_file) insn-config.h
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattrtab.c

genoutput.exe : genoutput.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genoutput.o $(HOST_RTL) $(HOST_LIBS)

genoutput.o : genoutput.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genoutput.c

# Compile the libraries to be used by gen*.
# If we are not cross-building, gen* use the same .o's that cc1.exe will use,
# and HOST_PREFIX_1 is `foobar', just to ensure these rules don't conflict
# with the rules for rtl.o, alloca.o, etc.
$(HOST_PREFIX_1)rtl.o : $(srcdir)/rtl.c $(CONFIG_H) $(RTL_H)
	del $(HOST_PREFIX)rtl.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/rtl.c > $(HOST_PREFIX)rtl.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtl.c

$(HOST_PREFIX_1)print-rtl.o : $(srcdir)/print-rtl.c $(CONFIG_H) $(RTL_H)
	del $(HOST_PREFIX)print-rtl.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/print-rtl.c > $(HOST_PREFIX)print-rtl.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)print-rtl.c

$(HOST_PREFIX_1)rtlanal.o : $(srcdir)/rtlanal.c $(CONFIG_H) $(RTL_H)
	del $(HOST_PREFIX)rtlanal.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/rtlanal.c > $(HOST_PREFIX)rtlanal.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtlanal.c

$(HOST_PREFIX_1)alloca.o : alloca.c
	del $(HOST_PREFIX)alloca.c
	cp $(srcdir)/alloca.c $(HOST_PREFIX)alloca.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)alloca.c

$(HOST_PREFIX_1)obstack.o : obstack.c
	del $(HOST_PREFIX)obstack.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/obstack.c > $(HOST_PREFIX)obstack.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)obstack.c

$(HOST_PREFIX_1)malloc.o : malloc.c
	del $(HOST_PREFIX)malloc.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/malloc.c > $(HOST_PREFIX)malloc.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)malloc.c

# This satisfies the dependency that we get if you cross-compile a compiler
# that does not need to compile alloca, malloc or whatever.
$(HOST_PREFIX_1): 
	touch $(HOST_PREFIX_1)

# Remake bytecode files.
BI_OBJ=bi-parser.o bi-lexer.o bi-reverse.o

bc-emit.o : bc-emit.c $(CONFIG_H) $(RTL_H) real.h $(BYTECODE_H)     bc-arity.h bc-opcode.h bc-typecd.h bc-typecd.def bi-run.h bytetypes.h
bc-optab.o : bc-optab.c $(CONFIG_H) $(REAL_H) $(BYTECODE_H)     bc-opcode.h bc-typecd.h bc-typecd.def

bi-arity.exe : bi-arity.o $(BI_OBJ) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 bi-arity.o $(BI_OBJ) $(HOST_LIBS)
bi-opcode.exe : bi-opcode.o $(BI_OBJ) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 bi-opcode.o $(BI_OBJ) $(HOST_LIBS)
bi-opname.exe : bi-opname.o $(BI_OBJ) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 bi-opname.o $(BI_OBJ) $(HOST_LIBS)

$(srcdir)/bi-parser.h: $(srcdir)/bi-parser.c
$(srcdir)/bi-parser.c: $(srcdir)/bi-parser.y
	 $(BISON) $(BISONFLAGS) -d bi-parser.y -o bi-parser.c

bi-parser.o : $(srcdir)/bi-parser.c bi-defs.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES)  	   $(srcdir)/bi-parser.c
bi-lexer.o : bi-lexer.c $(srcdir)/bi-parser.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES)  	   $(srcdir)/bi-lexer.c
bi-arity.o : bi-arity.c bi-defs.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES)  	   $(srcdir)/bi-arity.c
bi-opcode.o : bi-opcode.c bi-defs.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES)  	   $(srcdir)/bi-opcode.c
bi-opname.o : bi-opname.c bi-defs.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES)  	   $(srcdir)/bi-opname.c
bi-reverse.o : bi-reverse.c bi-defs.h
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES)  	   $(srcdir)/bi-reverse.c

bc-arity.h: stamp-bcarity 
stamp-bcarity : $(srcdir)/bytecode.def bi-arity.exe
	bi-arity < $(srcdir)\bytecode.def >tmp-bc-arity.h
	copy tmp-bc-arity.h bc-arity.h
	echo > stamp-bcarity

bc-opcode.h: stamp-bcopcode 
stamp-bcopcode : $(srcdir)/bytecode.def bi-opcode.exe
	bi-opcode < $(srcdir)\bytecode.def >tmp-bcopcd.h
	copy tmp-bcopcd.h bc-opcode.h
	echo > stamp-bcopcode

bc-opname.h: stamp-bcopname 
stamp-bcopname : $(srcdir)/bytecode.def bi-opname.exe
	bi-opname < $(srcdir)\bytecode.def >tmp-bcopnm.h
	copy tmp-bcopnm.h bc-opname.h
	echo > stamp-bcopname

bytecode.mostlyclean:
	-del bc-arity.h bc-opcode.h bc-opname.h

bytecode.distclean bytecode.clean:	bytecode.mostlyclean
	-del bi-arity.exe bi-opcode bi-opname.exe bi-lexer.exe

bytecode.maintainer-clean: bytecode.clean
	-del bi-parser.c bi-parser.h


# Remake cpp.exe and protoize.

# Making the preprocessor
cpp.exe : $(CCCP)$(exeext)
	-del cpp$(exeext)
	ln $(CCCP)$(exeext) cpp$(exeext) > NUL 2>&1  	 || copy $(CCCP)$(exeext) cpp$(exeext)
cccp.exe : cccp.o cexp.o version.o $(LIBDEPS)
	link $(LDFLAGS) -out:$@ cccp.o cexp.o  	  version.o $(LIBS)
cexp.o : $(srcdir)/cexp.c $(CONFIG_H)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/cexp.c
$(srcdir)/cexp.c: $(srcdir)/cexp.y
	 $(BISON) -o cexp.c cexp.y

cccp.o : cccp.c $(CONFIG_H) pcp.h version.c 
# The reason we use $(libdir)/g++-include rather than using libsubdir
# is for compatibility with the current version of libg++.
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)  	  -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\"  	  -DGPLUSPLUS_INCLUDE_DIR=\"$(gxx_include_dir)\"  	  -DLOCAL_INCLUDE_DIR=\"$(includedir)\"  	  -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\"  	  -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\"  	  -c cccp.c

cppmain: cppmain.o cpplib.o cpphash.o cppalloc.o cpperror.o cppexp.o    version.o $(LIBDEPS)
	link $(LDFLAGS) -out:$@ cppmain.o cpplib.o cpphash.o  	  cppalloc.o cpperror.o cppexp.o version.o $(LIBS)

cpplib.o : cpplib.c $(CONFIG_H) cpplib.h cpphash.h 
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)  	  -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\"  	  -DGPLUSPLUS_INCLUDE_DIR=\"$(gxx_include_dir)\"  	  -DLOCAL_INCLUDE_DIR=\"$(includedir)\"  	  -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\"  	  -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\"  	  -c cpplib.c

cpperror.o : cpperror.c $(CONFIG_H) cpplib.h

cppexp.o : cppexp.c $(CONFIG_H) cpplib.h

cpphash.o : cpphash.c cpplib.h cpphash.h

cppalloc.o : cppalloc.c $(CONFIG_H)

# Note for the stamp targets, we run the program `true' instead of
# having an empty command (nothing following the semicolon).

proto:  protoize unprotoize SYSCALLS.c.X

protoize: protoize.o getopt.o getopt1.o getpwd.o version.o $(LIBDEPS)
	link $(LDFLAGS) -out:$@  	  protoize.o getopt.o getopt1.o getpwd.o version.o $(LIBS)
protoize.o : stamp-proto 

unprotoize: unprotoize.o getopt.o getopt1.o getpwd.o version.o $(LIBDEPS)
	link $(LDFLAGS) -out:$@  	  unprotoize.o getopt.o getopt1.o getpwd.o version.o $(LIBS)
unprotoize.o :	stamp-proto 

stamp-proto: protoize.c getopt.h $(CONFIG_H)
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)            -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\"  	  -DGPLUSPLUS_INCLUDE_DIR=\"$(gxx_include_dir)\"            -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\"  	  -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\"  	  -DLOCAL_INCLUDE_DIR=\"$(includedir)\"  	  -DSTD_PROTO_DIR=\"$(libsubdir)\"  	  -DUNPROTOIZE $(srcdir)/protoize.c
	mv protoize$(objext) unprotoize$(objext)
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)            -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\"  	  -DGPLUSPLUS_INCLUDE_DIR=\"$(gxx_include_dir)\"            -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\"  	  -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\"  	  -DLOCAL_INCLUDE_DIR=\"$(includedir)\"  	  -DSTD_PROTO_DIR=\"$(libsubdir)\"  	  $(srcdir)/protoize.c
	echo > stamp-proto

getopt.o : getopt.c getopt.h
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/getopt.c
getopt1.o : getopt1.c getopt.h
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/getopt1.c

# This info describes the target machine, so compile with GCC just built.
SYSCALLS.c.X: $(srcdir)/sys-types.h $(srcdir)/sys-protos.h $(GCC_PASSES)     stmp-int-hdrs
	-del SYSCALLS.c tmp-SYSCALLS.s
	cat $(srcdir)/sys-types.h $(srcdir)/sys-protos.h > SYSCALLS.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)  	  -aux-info $@ -S -o tmp-SYSCALLS.s SYSCALLS.c
	-del SYSCALLS.c tmp-SYSCALLS.s


test-protoize-simple: ./protoize ./unprotoize $(GCC_PASSES)
	-del tmp-proto.[cso]
	cp $(srcdir)/protoize.c tmp-proto.c
	chmod u+w tmp-proto.c
	protoize -N -B ./ -x getopt.h -c "-B./ -Wall -Wwrite-strings  	  $(CFLAGS) $(INCLUDES)  	  -DGCC_INCLUDE_DIR=0  	  -DGPLUSPLUS_INCLUDE_DIR=0  	  -DCROSS_INCLUDE_DIR=0  	  -DTOOL_INCLUDE_DIR=0  	  -DSTD_PROTO_DIR=0" tmp-proto.c
	@echo '**********' Expect 400 lines of differences.
	-diff $(srcdir)/protoize.c tmp-proto.c > tmp-proto.diff
	-wc -l tmp-proto.diff
	unprotoize -N -x getopt.h -c "-B./ -Wall -Wwrite-strings  	  $(CFLAGS) $(INCLUDES)  	  -DGCC_INCLUDE_DIR=0  	  -DGPLUSPLUS_INCLUDE_DIR=0  	  -DCROSS_INCLUDE_DIR=0  	  -DTOOL_INCLUDE_DIR=0  	  -DSTD_PROTO_DIR=0" tmp-proto.c
	@echo Expect zero differences.
	diff $(srcdir)/protoize.c tmp-proto.c | cat
	-del tmp-proto.[cs] tmp-proto$(objext)

# Build the include directory.  The stamp files are stmp-* rather than
# stamp-* so that mostlyclean does not force the include directory to
# be rebuilt.


# Copy in the headers provided with gcc.
USER_H = $(srcdir)\ginclude\stdarg.h $(srcdir)\ginclude\stddef.h      $(srcdir)\ginclude\varargs.h $(srcdir)\ginclude\va-alpha.h      $(srcdir)\ginclude\va-h8300.h $(srcdir)\ginclude\va-i860.h      $(srcdir)\ginclude\va-i960.h $(srcdir)\ginclude\va-mips.h      $(srcdir)\ginclude\va-m88k.h $(srcdir)\ginclude\va-pa.h      $(srcdir)\ginclude\va-pyr.h $(srcdir)\ginclude\va-sparc.h      $(srcdir)\ginclude\va-clipper.h $(srcdir)\ginclude\va-spur.h      $(srcdir)\ginclude\iso646.h      $(srcdir)\ginclude\proto.h

# Build the include directory except for float.h (which depends upon
# enquire).

stmp-int-hdrs: $(USER_H)
	type $(srcdir)\limitx.h >xlimits.h
	type $(srcdir)\glimits.h >>xlimits.h
	type $(srcdir)\limity.h >>xlimits.h

	-mkdir include	
	for %%f in ($(USER_H)) do copy %%f include
	del include\limits.h
	copy xlimits.h include\limits.h
	del include\syslimits.h
	copy $(srcdir)\gsyslimits.h include\syslimits.h
	copy include\limits.h include\syslimits.h
	del include\README
	copy $(srcdir)\README-fixinc include\README
	touch stmp-int-hdrs

stmp-headers: stmp-int-hdrs fixinc-nt.exe
	fixinc-nt
	touch stmp-headers

# Build float.h.
stmp-float_h: libgcc.lib enquire.exe
	-.\enquire -f > tmp-float.h
	del include\float.h
	copy tmp-float.h include\float.h
	touch stmp-float_h

fixinc-nt.o: $(srcdir)/config/winnt/fixinc-nt.c
	cl -c -I. -I$(srcdir) -I$(srcdir)/include -I$(srcdir)/config/winnt $(srcdir)/config/winnt/fixinc-nt.c

fixinc-nt.exe: fixinc-nt.o dirent.o
	cl fixinc-nt.o dirent.o libc.lib kernel32.lib

# Files related to the fixproto script.

deduced.h: $(GCC_PASSES) $(srcdir)/scan-types.sh stmp-int-hdrs
	CC="$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) -I. -I$(srcdir) -Iinclude -I$(SYSTEM_HEADER_DIR)";  	  export CC;  	  $(SHELL) $(srcdir)/scan-types.sh "$(srcdir)" >tmp-deduced.h
	mv tmp-deduced.h deduced.h

gen-protos: gen-protos.o scan.o cppalloc.o $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	  gen-protos.o scan.o cppalloc.o $(HOST_LIBS)

gen-protos.o : gen-protos.c scan.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/gen-protos.c

scan.o : scan.c scan.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/scan.c

xsys-protos.h: $(GCC_PASSES) $(srcdir)/sys-protos.h deduced.h gen-protos Makefile
	cat deduced.h $(srcdir)/sys-protos.h > tmp-fixtmp.c
	mv tmp-fixtmp.c fixtmp.c
	$(GCC_FOR_TARGET) fixtmp.c -w -U__SIZE_TYPE__ -U__PTRDIFF_TYPE__ -U__WCHAR_TYPE__ -E  	  | sed -e 's/	/ /g' -e 's/ *(/ (/g' -e 's/ [ ]*/ /g' -e 's/( )/()/'  	  | ./gen-protos >xsys-protos.hT
	mv xsys-protos.hT xsys-protos.h
	rm -rf fixtmp.c

fix-header: fix-header.o scan-decls.o scan.o xsys-protos.h $(HOST_LIBDEPS)     cpplib.o cpphash.o cppalloc.o cppexp.o cpperror.o version.o
	link $(HOST_LDFLAGS) -out:$@ fix-header.o  	   scan-decls.o scan.o cpplib.o cpphash.o cppalloc.o version.o  	   cppexp.o $(HOST_LIBS)

fix-header.o : fix-header.c obstack.h scan.h xsys-protos.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/fix-header.c

scan-decls.o : scan-decls.c scan.h cpplib.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/scan-decls.c

# stmp-fixproto depends on this, not on fix-header directly.
# The idea is to make sure fix-header gets built,
# but not rerun fixproto after each stage
# just because fix-header's mtime has changed.
fixhdr.ready: fix-header
	-if [ -f fixhdr.ready ] ; then  		true;  	else  		touch fixhdr.ready;  	fi

# stmp-headers is to make sure fixincludes has already finished.
# The if statement is so that we don't run fixproto a second time
# if it has already been run on the files in `include'.
stmp-fixproto: fixhdr.ready fixproto stmp-headers
	@echo "Various warnings and error messages from fixproto are normal"
	-if [ -d include ] ; then true; else mkdir include; fi
	-if [ -f include/fixed ] ; then true;  	else  	  : This line works around a 'make' bug in BSDI 1.1.;  	  FIXPROTO_DEFINES="$(FIXPROTO_DEFINES)"; export FIXPROTO_DEFINES;  	  $(SHELL) fixproto include include $(SYSTEM_HEADER_DIR);  	  touch include/fixed;  	fi
	touch stmp-fixproto

# Remake the info files.

doc: info
info: $(srcdir)/cpp.info $(srcdir)/gcc.info lang.info

$(srcdir)/cpp.info: cpp.texi
	 $(MAKEINFO) cpp.texi

$(srcdir)/gcc.info: gcc.texi extend.texi install.texi invoke.texi  		md.texi rtl.texi tm.texi 
	 $(MAKEINFO) gcc.texi

dvi: $(srcdir)/gcc.dvi $(srcdir)/cpp.dvi lang.dvi

# This works with GNU Make's default rule.
$(srcdir)/gcc.dvi: gcc.texi extend.texi install.texi invoke.texi  		md.texi rtl.texi tm.texi 
	$(TEXI2DVI) $<

# This works with GNU Make's default rule.
$(srcdir)/cpp.dvi: cpp.texi
	$(TEXI2DVI) $<

$(srcdir)/INSTALL: install1.texi install.texi
	$(MAKEINFO) -D INSTALLONLY --no-header --no-split  	  install1.texi

# Deletion of files made during compilation.
# There are four levels of this:
#   `mostlyclean', `clean', `distclean' and `maintainer-clean'.
# `mostlyclean' is useful while working on a particular type of machine.
# It deletes most, but not all, of the files made by compilation.
# It does not delete libgcc.a or its parts, so it won't have to be recompiled.
# `clean' deletes everything made by running `make all'.
# `distclean' also deletes the files made by config.
# `maintainer-clean' also deletes everything that could be regenerated
# automatically.  We remove as much from the language subdirectories as we can
# (less duplicated code).


mostlyclean: bytecode.mostlyclean lang.mostlyclean
	-del $(STAGESTUFF)
# Clean the objc subdir if we created one.
	if [ -d objc ]; then  	  srcdir1=`cd $(srcdir); pwd`;  	  cd objc; $(MAKE) -f $$srcdir1/objc/Makefile mostlyclean;  	else true; fi
	-del libobjc.a
# Delete the temporary source copies for cross compilation.
	-del $(HOST_PREFIX_1)rtl.c $(HOST_PREFIX_1)rtlanal.c
	-del $(HOST_PREFIX_1)alloca.c $(HOST_PREFIX_1)malloc.c
	-del $(HOST_PREFIX_1)obstack.c 
# Delete the temp files made in the course of building libgcc.a.
	-del tmplibgcc* tmpcopy xlimits.h
	for name in $(LIB1FUNCS); do del $${name}.c; done
# Delete other temporary files.
	-del tmp-float.h tmp-gcc.xtar.gz
	-del tmp-foo1 tmp-foo2 tmp-proto.* tmp-unproto.1 tmp-SYSCALLS.s
	-del tmp-c-parse.y tmp-objc-prs.y tmp-gperf.h
	-del tmp-specs t-float.h-cross tmp-xlimits.h
	-del tmp-fixtmp.c xsys-protos.hT
# Delete the stamp files.
	-del stamp-* tmp-*
	-del */stamp-* */tmp-*
# Delete debugging dump files.
	-del *.greg *.lreg *.combine *.flow *.cse *.jump *.rtl *.tree *.loop
	-del *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack
	-del */*.greg */*.lreg */*.combine */*.flow */*.cse */*.jump */*.rtl
	-del */*.tree */*.loop */*.dbr */*.jump2 */*.sched */*.cse2
	-del */*.sched2 */*.stack
# Delete some files made during installation.
	-del specs gfloat.h float.h-* enquire.exe SYSCALLS.c.X SYSCALLS.c
	-del collect collect2 mips-tfile mips-tdump alloca.s
# Delete files generated.exe for fixproto
	-rm -rf fix-header xsys-protos.h deduced.h tmp-deduced.h  	  gen-protos fixproto.list fixtmp.* fixhdr.ready
# Delete unwanted output files from TeX.
	-del *.toc *.log *.vr *.fn *.cp *.tp *.ky *.pg
	-del */*.toc */*.log */*.vr */*.fn */*.cp */*.tp */*.ky */*.pg
# Delete sorted indices we don't actually use.
	-del gcc.vrs gcc.kys gcc.tps gcc.pgs gcc.fns
# Delete core dumps.
	-del core */core

# Delete all files made by compilation
# that don't exist in the distribution.
clean: mostlyclean bytecode.clean lang.clean
# It may not be quite desirable to delete unprotoize.c here,
# but the spec for `make clean' requires it.
# Using unprotoize.c is not quite right in the first place, 
# but what better way is there?
	-del libgcc.a libgcc1.a libgcc1-asm.a libgcc2.a libgcc2.ready
	-del libgcc1.null
	-del *.dvi
	-del */*.dvi
	-if [ -f md.pre-cpp.exe ]; then  	  del md ;  	fi
# Delete the include directory.
	-rm -rf stmp-* include objc-headers
	-del */stmp-*
# Delete files used by the "multilib" facility (including libgcc subdirs).
	-del multilib.h tmpmultilib*
	-if [ "x$(MULTILIB_DIRNAMES)" != x ] ; then  	  rm -rf $(MULTILIB_DIRNAMES);  	else if [ "x$(MULTILIB_OPTIONS)" != x ] ; then  	  rm -rf `echo $(MULTILIB_OPTIONS) | sed -e 's/\// /g'`;  	fi ; fi

# Delete all files that users would normally create
# while building and installing GCC.
distclean: clean bytecode.distclean lang.distclean
	-del tm.h config.h tconfig.h hconfig.h md
	-del  config.run
	-del Makefile specs.h options.h *.oaux
	-delr stage1 stage2 stage3 stage4
	-del */stage1 */stage2 */stage3 */stage4 */include
	-del objc-parse.output
	-del c-parse.output
	-del *.asm

# Delete anything likely to be found in the source directory
# that shouldn't be in the distribution.
extraclean: distclean lang.extraclean
	-rm -rf =* ./"#"* *~* config/=* config/"#"* config/*~*
	-del patch* *.orig *.rej config/patch* config/*.orig config/*.rej
	-del config/*/=* config/*/"#"* config/*/*~*
	-del config/*/*.orig config/*/*.rej
	-del *.dvi *.ps *.oaux *.d *.[zZ] *.gz
	-del *.tar *.xtar *diff *.diff.* *.tar.* *.xtar.* *diffs
	-del *lose config/*lose config/*/*lose
	-del *.s *.s[0-9] *.i install1.texi config/ChangeLog
	-del */=* */"#"* */*~*
	-del */patch* */*.orig */*.rej
	-del */*.dvi */*.oaux */*.d */*.[zZ] */*.gz
	-del */*.tar */*.xtar */*diff */*.diff.* */*.tar.* */*.xtar.* */*diffs
	-del */*lose */*.s */*.s[0-9] */*.i

# Get rid of every file that's generated.exe from some other file.
# Most of these files ARE PRESENT in the GCC distribution.
maintainer-clean: distclean bytecode.maintainer-clean lang.maintainer-clean
	-del c-parse.y c-gperf.h objc-parse.y
	-del objc-parse.c objc-parse.output
	-del c-parse.c c-parse.h c-parse.output
	-del cexp.c cexp.output TAGS 
	-del cpp.info* cpp.??s cpp.*aux
	-del gcc.info* gcc.??s gcc.*aux

# Entry points `install' and `uninstall'.
# Also use `install-collect2' to install collect2 when the config files don't.

# The semicolon is to prevent the install.sh -> install default rule
# from doing anything.  Having it run true helps avoid problems and
# noise from versions of make which don't like to have null commands.
install: $(INSTALL_TARGET) 

# Copy the compiler files into directories where they will be run.
# Install the driver last so that the window when things are
# broken is small.
install-normal: install-common $(INSTALL_HEADERS) $(INSTALL_LIBGCC)      install-libobjc install-man install-info lang.install-normal install-driver

# Do nothing while making gcc with a cross-compiler. The person who
# makes gcc for the target machine has to know how to put a complete
# gcc together by hand.
install-build: force
	@echo You have to install gcc on your target machine by hand.

# Run this on the target machine
# to finish installation of cross compiler.
install-cross-rest: install-float-h-cross

# Install float.h for cross compiler.
# Run this on the target machine!
install-float-h-cross: install-dir
#	if [ -f enquire.exe ] ; then true; else false; fi
# Note: don't use -.  We should fail right away if enquire.exe was not made.
	enquire.exe -f > $(tmpdir)/float.h
	-del $(libsubdir)/include/float.h
	$(INSTALL_DATA) $(tmpdir)/float.h $(libsubdir)/include/float.h
	-del $(tmpdir)/float.h
	chmod a-x $(libsubdir)/include/float.h

# Create the installation directory.
install-dir:
	-if [ -d $(libdir) ] ; then true ; else mkdir $(libdir) ; chmod a+rx $(libdir) ; fi
	-if [ -d $(libdir)/gcc-lib ] ; then true ; else mkdir $(libdir)/gcc-lib ; chmod a+rx $(libdir)/gcc-lib ; fi
# This dir isn't currently searched by cpp.
#	-if [ -d $(libdir)/gcc-lib/include ] ; then true ; else mkdir $(libdir)/gcc-lib/include ; chmod a+rx $(libdir)/gcc-lib/include ; fi
	-if [ -d $(libdir)/gcc-lib/$(target) ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target) ; chmod a+rx $(libdir)/gcc-lib/$(target) ; fi
	-if [ -d $(libdir)/gcc-lib/$(target)/$(version) ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target)/$(version) ; chmod a+rx $(libdir)/gcc-lib/$(target)/$(version) ; fi
	-if [ -d $(libdir)/gcc-lib/$(target)/$(version)/include ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target)/$(version)/include ; chmod a+rx $(libdir)/gcc-lib/$(target)/$(version)/include ; fi
	-if [ -d $(bindir) ] ; then true ; else mkdir $(bindir) ; chmod a+rx $(bindir) ; fi
	-if [ -d $(includedir) ] ; then true ; else mkdir $(includedir) ; chmod a+rx $(includedir) ; fi
	-if [ -d $(tooldir) ] ; then true ; else mkdir $(tooldir) ; chmod a+rx $(tooldir) ; fi
	-if [ -d $(assertdir) ] ; then true ; else mkdir $(assertdir) ; chmod a+rx $(assertdir) ; fi
	-if [ -d $(infodir) ] ; then true ; else mkdir $(infodir) ; chmod a+rx $(infodir) ; fi
# We don't use mkdir -p to create the parents of mandir,
# because some systems don't support it.
# Instead, we use this technique to create the immediate parent of mandir.
	-parent=`echo $(mandir)|sed -e 's@/[^/]*$$@@'`;  	if [ -d $$parent ] ; then true ; else mkdir $$parent ; chmod a+rx $$parent ; fi
	-if [ -d $(mandir) ] ; then true ; else mkdir $(mandir) ; chmod a+rx $(mandir) ; fi

# Install the compiler executables built during cross compilation.
install-common: native install-dir $(EXTRA_PARTS) lang.install-common
	for file in $(COMPILERS); do  	  if [ -f $$file ] ; then  	    del $(libsubdir)/$$file;  	    $(INSTALL_PROGRAM) $$file $(libsubdir)/$$file;  	  else true;  	  fi;  	done
	for file in $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2) ..; do  	  if [ x"$$file" != x.. ]; then  	    del $(libsubdir)/$$file;  	    $(INSTALL_PROGRAM) $$file $(libsubdir)/$$file;  	  else true; fi;  	done
	for file in $(EXTRA_PARTS) ..; do  	  if [ x"$$file" != x.. ]; then  	    del $(libsubdir)/$$file;  	    $(INSTALL_DATA) $$file $(libsubdir)/$$file;  	  else true; fi;  	done
# Don't mess with specs if it doesn't exist yet.
	-if [ -f specs ] ; then  	  del $(libsubdir)/specs;  	  $(INSTALL_DATA) specs $(libsubdir)/specs;  	fi
# Install protoize if it was compiled.
	-if [ -f protoize$(exeext) ];  	then  	    del $(bindir)/protoize$(exeext);  	    $(INSTALL_PROGRAM) protoize$(exeext) $(bindir)/protoize$(exeext);  	    del $(bindir)/unprotoize$(exeext);  	    $(INSTALL_PROGRAM) unprotoize$(exeext) $(bindir)/unprotoize$(exeext);  	    del $(libsubdir)/SYSCALLS.c.X;  	    $(INSTALL_DATA) SYSCALLS.c.X $(libsubdir)/SYSCALLS.c.X;  	    chmod a-x $(libsubdir)/SYSCALLS.c.X;  	fi
	-del $(libsubdir)/cpp$(exeext)
	$(INSTALL_PROGRAM) cpp$(exeext) $(libsubdir)/cpp$(exeext)

# Install the driver program as $(target)-gcc
# and also as either gcc (if native) or $(tooldir)/bin/gcc.
install-driver: xgcc.exe
	-if [ -f gcc-cross$(exeext) ] ; then  	  del $(bindir)/$(GCC_CROSS_NAME)$(exeext);  	  $(INSTALL_PROGRAM) gcc-cross$(exeext) $(bindir)/$(GCC_CROSS_NAME)$(exeext);  	  if [ -d $(tooldir)/bin/. ] ; then  	    del $(tooldir)/bin/gcc$(exeext);  	    $(INSTALL_PROGRAM) gcc-cross$(exeext) $(tooldir)/bin/gcc$(exeext);  	  else true; fi;  	else  	  del $(bindir)/$(GCC_INSTALL_NAME)$(exeext);  	  $(INSTALL_PROGRAM) xgcc$(exeext) $(bindir)/$(GCC_INSTALL_NAME)$(exeext);  	  del $(bindir)/$(target)-gcc-1$(exeext);  	  ln $(bindir)/$(GCC_INSTALL_NAME)$(exeext) $(bindir)/$(target)-gcc-1$(exeext)  	    > NUL 2>&1  	    || copy $(bindir)/$(GCC_INSTALL_NAME)$(exeext) $(bindir)/$(target)-gcc-1$(exeext);  	  mv $(bindir)/$(target)-gcc-1$(exeext) $(bindir)/$(target)-gcc$(exeext);  	fi

# Install the info files.
install-info: doc install-dir lang.install-info
	-del $(infodir)/cpp.info* $(infodir)/gcc.info*
	 for f in cpp.info* gcc.info*;  	do $(INSTALL_DATA) $$f $(infodir)/$$f; done
	-chmod a-x $(infodir)/cpp.info* $(infodir)/gcc.info*

# Install the man pages.
install-man: install-dir $(srcdir)/gcc.1 $(srcdir)/cccp.1 lang.install-man
	-if [ -f gcc-cross ] ; then  	  del $(mandir)/$(GCC_CROSS_NAME)$(manext);  	  $(INSTALL_DATA) $(srcdir)/gcc.1 $(mandir)/$(GCC_CROSS_NAME)$(manext);  	  chmod a-x $(mandir)/$(GCC_CROSS_NAME)$(manext);  	else  	  del $(mandir)/$(GCC_INSTALL_NAME)$(manext);  	  $(INSTALL_DATA) $(srcdir)/gcc.1 $(mandir)/$(GCC_INSTALL_NAME)$(manext);  	  chmod a-x $(mandir)/$(GCC_INSTALL_NAME)$(manext);  	fi
	-del $(mandir)/cccp$(manext)
	-$(INSTALL_DATA) $(srcdir)/cccp.1 $(mandir)/cccp$(manext)
	-chmod a-x $(mandir)/cccp$(manext)

# Install the library.
install-libgcc: libgcc.a install-dir
	-if [ -f libgcc.a ] ; then  	  del $(libsubdir)/libgcc.a;  	  $(INSTALL_DATA) libgcc.a $(libsubdir)/libgcc.a;  	  if $(RANLIB_TEST) ; then  	    (cd $(libsubdir); $(RANLIB) libgcc.a); else true; fi;  	  chmod a-x $(libsubdir)/libgcc.a;  	else true; fi

# Install multiple versions of libgcc.a.
install-multilib: stmp-multilib install-dir
	for i in `$(GCC_FOR_TARGET) --print-multi-lib`; do  	  dir=`echo $$i | sed -e 's/;.*$$//'`;  	  if [ -d $(libsubdir)/$${dir} ]; then true; else mkdir $(libsubdir)/$${dir}; fi;  	  del $(libsubdir)/$${dir}/libgcc.a;  	  $(INSTALL_DATA) $${dir}/libgcc.a $(libsubdir)/$${dir}/libgcc.a;  	  if $(RANLIB_TEST); then  	    (cd $(libsubdir)/$${dir}; $(RANLIB) libgcc.a); else true; fi;  	  chmod a-x $(libsubdir)/$${dir}/libgcc.a;  	done

# Install the objc run time library.
install-libobjc: install-dir
	-if [ -f libobjc.a ] ; then  	  del $(libsubdir)/libobjc.a;  	  $(INSTALL_DATA) libobjc.a $(libsubdir)/libobjc.a;  	  if $(RANLIB_TEST) ; then  	    (cd $(libsubdir); $(RANLIB) libobjc.a); else true; fi;  	  chmod a-x $(libsubdir)/libobjc.a;  	else true; fi

# Install all the header files built in the include subdirectory.
install-headers: install-include-dir $(INSTALL_HEADERS_DIR) $(INSTALL_ASSERT_H)
# Fix symlinks to absolute paths in the installed include directory to
# point to the installed directory, not the build directory.
	-files=`cd $(libsubdir)/include; find . -type l -print 2>NUL`;  	if [ $$? -eq 0 ]; then  	  dir=`cd include; pwd`;  	  for i in $$files; do  	    dest=`ls -ld $(libsubdir)/include/$$i | sed -n 's/.*-> //p'`;  	    if expr "$$dest" : "$$dir.*" > NUL; then  	      del $(libsubdir)/include/$$i;  	      ln -s `echo $$i | sed "s|/[^/]*|/..|g" | sed 's|/..$$||'``echo "$$dest" | sed "s|$$dir||"` $(libsubdir)/include/$$i;  	    fi;  	  done;  	fi

# Create or recreate the gcc private include file directory.
install-include-dir: install-dir
	-rm -rf $(libsubdir)/include
	mkdir $(libsubdir)/include
	-chmod a+rx $(libsubdir)/include

# Install the include directory using tar.
install-headers-tar: stmp-headers $(STMP_FIXPROTO) install-include-dir
	(cd include;  	 tar -cf - .; exit 0) | (cd $(libsubdir)/include; tar $(TAROUTOPTS) - )
# /bin/sh on some systems returns the status of the first tar,
# and that can lose with GNU tar which always writes a full block.
# So use `exit 0' to ignore its exit status.

# Install the include directory using cpio.
install-headers-cpio: stmp-headers $(STMP_FIXPROTO) install-include-dir
	(cd include; find . -print) | (cd include; cpio -pdum $(libsubdir)/include)

# Put assert.h where it won't override GNU libc's assert.h.
# It goes in a dir that is searched after GNU libc's headers;
# thus, the following conditionals are no longer needed.
# But it's not worth deleting them now.
## Don't replace the assert.h already there if it is not from GCC.
## This code would be simpler if it tested for -f ... && ! grep ...
## but supposedly the ! operator is missing in sh on some systems.
install-assert-h: assert.h install-dir
	if [ -f $(assertdir)/assert.h ];  	then  	  if grep "__eprintf" $(assertdir)/assert.h >NUL;  	    then  	    del $(assertdir)/assert.h;  	    $(INSTALL_DATA) $(srcdir)/assert.h $(assertdir)/assert.h;  	    chmod a-x $(assertdir)/assert.h;  	  else true;  	  fi;  	else  	  del $(assertdir)/assert.h;  	  $(INSTALL_DATA) $(srcdir)/assert.h $(assertdir)/assert.h;  	  chmod a-x $(assertdir)/assert.h;  	fi

# Use this target to install the program `collect2' under the name `ld'.
install-collect2: collect2 install-dir
	$(INSTALL_PROGRAM) collect2$(exeext) $(libsubdir)/ld$(exeext)
# Install the driver program as $(libsubdir)/gcc for collect2.
	$(INSTALL_PROGRAM) xgcc$(exeext) $(libsubdir)/gcc$(exeext)

# Cancel installation by deleting the installed files.
uninstall: lang.uninstall
	-rm -rf $(libsubdir)
	-rm -rf $(bindir)/$(GCC_INSTALL_NAME)$(exeext)
	-rm -rf $(bindir)/$(GCC_CROSS_NAME)$(exeext)
	-rm -rf $(bindir)/protoize$(exeext)
	-rm -rf $(bindir)/unprotoize$(exeext)
	-rm -rf $(mandir)/$(GCC_INSTALL_NAME)$(manext)
	-rm -rf $(mandir)/$(GCC_CROSS_NAME)$(manext)
	-rm -rf $(mandir)/cccp$(manext)
	-rm -rf $(mandir)/protoize$(manext)
	-rm -rf $(mandir)/unprotoize$(manext)

# These exist for maintenance purposes.

# Update the tags table.
TAGS: force
								 	mkdir temp;							 	mv -f c-parse.[ch] objc-parse.c cexp.c =*.[chy] temp;		 	etags *.y *.h *.c;						 	mv temp/* .;							 	rmdir temp

# Create the distribution tar file.
#dist: gcc-$(version).tar.gz
dist: gcc.xtar.gz

gcc.xtar.gz: gcc.xtar
	gzip --best < gcc.xtar > tmp-gcc.xtar.gz
	mv tmp-gcc.xtar.gz gcc.xtar.gz

#gcc-$(version).tar.gz: gcc-$(version).tar
#	gzip < gcc-$(version).tar > gcc-$(version).tar.gz

#gcc-$(version).tar:
gcc.xtar: distdir
# Make the distribution.
	tar -chf gcc.xtar gcc-$(version)

# This target exists to do the initial work before the language specific
# stuff gets done.
distdir-start: doc $(srcdir)/INSTALL c-parse.y c-gperf.h    objc-parse.y c-parse.c $(srcdir)/objc-parse.c    $(srcdir)/cexp.c
	@if grep -s "for version $(mainversion)" gcc.texi > NUL;  	then true;  	else echo "You must update the version number in \`gcc.texi'"; sleep 10; 	fi
# Update the version number in README
	awk '$$1 " " $$2 " " $$3 == "This directory contains"  		{ $$6 = version; print $$0 }  	     $$1 " " $$2 " " $$3 != "This directory contains"'  	  version=$(version) README > tmp.README
	mv tmp.README README
	-rm -rf gcc-$(version) tmp	
# Put all the files in a temporary subdirectory
# which has the name that we want to have in the tar file.
	mkdir tmp
	mkdir tmp/config
	mkdir tmp/ginclude
	mkdir tmp/objc
	for file in *[0-9a-zA-Z+]; do  	  ln $$file tmp > NUL 2>&1 || copy $$file tmp;  	done
	cd config;  	for file in *[0-9a-zA-Z+]; do  	  if test -d $$file && test "$$file" != RCS; then  	    mkdir ../tmp/config/$$file;  	    cd $$file;  	    for subfile in *[0-9a-zA-Z+]; do  	      ln $$subfile ../../tmp/config/$$file >NUL 2>&1  	      || copy $$subfile ../../tmp/config/$$file;  	    done;  	    cd ..;  	  else  	    ln $$file ../tmp/config >NUL 2>&1  	    || copy $$file ../tmp/config;  	  fi;  	done
	cd ginclude;  	for file in *[0-9a-zA-Z+]; do  	  ln $$file ../tmp/ginclude >NUL 2>&1  	   || copy $$file ../tmp/ginclude;  	done
	cd objc;  	for file in *[0-9a-zA-Z+]; do  	  ln $$file ../tmp/objc >NUL 2>&1 || copy $$file ../tmp/objc;  	done
	ln .gdbinit tmp

# Finish making `distdir', after the languages have done their thing.
distdir-finish:
	mv tmp gcc-$(version)
# Get rid of everything we don't want in the distribution.  We'd want
# this to use Makefile.in, but it doesn't have the `lang.foo' targets
# expanded.
	cd gcc-$(version); make extraclean

distdir: distdir-start lang.distdir distdir-finish

# make diff oldversion=M.N 
# creates a diff file between an older distribution and this one.
# The -P option assumes this is GNU diff.
diff:
	diff -rc2P -x c-parse.y -x c-parse.c -x c-parse.h -x c-gperf.h  	  -x cexp.c -x bi-parser.c -x objc-parse.y -x objc-parse.c  	  -x TAGS  	  -x "gcc.??" -x "gcc.??s" -x gcc.aux -x "gcc.info*"  	  -x "cpp.??" -x "cpp.??s" -x cpp.aux -x "cpp.info*"  	  $(LANG_DIFF_EXCLUDES)  	  gcc-$(oldversion) gcc-$(version) > diffs

bootstrap: force
# Only build the C compiler for stage1, because that is the only one that
# we can guarantee will build with the native compiler, and also it is the
# only thing useful for building stage2.
	$(MAKE) CC="$(CC)" libdir=$(libdir) LANGUAGES=c
	$(MAKE) stage1
# This used to define ALLOCA as empty, but that would lead to bad results
# for a subsequent `make install' since that would not have ALLOCA empty.
# To prevent `make install' from compiling alloca.o and then relinking cc1.exe
# because alloca.o is newer, we permit these recursive makes to compile
# alloca.o.  Then cc1.exe is newer, so it won't have to be relinked.
	$(MAKE) CC="stage1/xgcc.exe -Bstage1/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES="$(LANGUAGES)"
	$(MAKE) stage2
	$(MAKE) CC="stage2/xgcc.exe -Bstage2/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES="$(LANGUAGES)"

bootstrap2: force
	$(MAKE) CC="stage1/xgcc.exe -Bstage1/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES="$(LANGUAGES)"
	$(MAKE) stage2
	$(MAKE) CC="stage2/xgcc.exe -Bstage2/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES="$(LANGUAGES)"

bootstrap3: force
	$(MAKE) CC="stage2/xgcc.exe -Bstage2/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES="$(LANGUAGES)"

# Compare the object files in the current directory with those in the
# stage2 directory.

# ./ avoids bug in some versions of tail.
compare: force
	for file in *$(objext); do  	  tail +16c ./$$file > tmp-foo1;  	  tail +16c stage2/$$file > tmp-foo2 2>NUL  	    && (cmp tmp-foo1 tmp-foo2 || echo $$file differs) || true;  	done
	for dir in tmp-foo $(SUBDIRS); do  	  if [ "`echo $$dir/*$(objext)`" != "$$dir/*$(objext)" ] ; then  	    for file in $$dir/*$(objext); do  	      tail +16c ./$$file > tmp-foo1;  	      tail +16c stage2/$$file > tmp-foo2 2>NUL  	        && (cmp tmp-foo1 tmp-foo2 || echo $$file differs) || true;  	    done;  	  fi;  	done
	-del tmp-foo*

# Similar, but compare with stage3 directory
compare3: force
	for file in *$(objext); do  	  tail +16c ./$$file > tmp-foo1;  	  tail +16c stage3/$$file > tmp-foo2 2>NUL  	    && (cmp tmp-foo1 tmp-foo2 || echo $$file differs) || true;  	done
	for dir in tmp-foo $(SUBDIRS); do  	  if [ "`echo $$dir/*$(objext)`" != "$$dir/*$(objext)" ] ; then  	    for file in $$dir/*$(objext); do  	      tail +16c ./$$file > tmp-foo1;  	      tail +16c stage3/$$file > tmp-foo2 2>NUL  	        && (cmp tmp-foo1 tmp-foo2 || echo $$file differs) || true;  	    done;  	  fi;  	done
	-del tmp-foo*

# Compare the object files in the current directory with those in the
# stage2 directory.  Use gnu cmp (diffutils v2.4 or later) to avoid
# running tail and the overhead of twice copying each object file.

gnucompare: force
	for file in *$(objext); do  	  cmp --ignore-initial=16 $$file stage2/$$file || true ;  	done
	for dir in tmp-foo $(SUBDIRS); do  	  if [ "`echo $$dir/*$(objext)`" != "$$dir/*$(objext)" ] ; then  	    for file in $$dir/*$(objext); do  	      cmp --ignore-initial=16 $$file stage2/$$file || true ;  	    done;  	  fi;  	done

# Similar, but compare with stage3 directory
gnucompare3: force
	for file in *$(objext); do  	  cmp --ignore-initial=16 $$file stage3/$$file || true ;  	done
	for dir in tmp-foo $(SUBDIRS); do  	  if [ "`echo $$dir/*$(objext)`" != "$$dir/*$(objext)" ] ; then  	    for file in $$dir/*$(objext); do  	      cmp --ignore-initial=16 $$file stage3/$$file || true ;  	    done;  	  fi;  	done

# Copy the object files from a particular stage into a subdirectory.
stage1-start:
	-if [ -d stage1 ] ; then true ; else mkdir stage1 ; fi
	-for dir in . $(SUBDIRS) ;  	 do  	   if [ -d stage1/$$dir ] ; then true ; else mkdir stage1/$$dir ; fi ;  	 done
	-mv $(STAGESTUFF) stage1
# Copy as/ld if they exist to stage dir, so that running xgcc.exe from the stage
# dir will work properly.
	-if [ -f as$(exeext) ] ; then ln -s ../as$(exeext) stage1 || copy as$(exeext) stage1 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then ln -s ../ld$(exeext) stage1 || copy ld$(exeext) stage1 ; else true ; fi
	-if [ -f collect-ld$(exeext) ] ; then ln -s ../collect-ld$(exeext) stage1 || copy collect-ld$(exeext) stage1 ; else true ; fi
	-del stage1/libgcc.a
	-cp libgcc.a stage1
	-if $(RANLIB_TEST) ; then $(RANLIB) stage1/libgcc.a; else true; fi
stage1: force stage1-start lang.stage1

stage2-start:
	-if [ -d stage2 ] ; then true ; else mkdir stage2 ; fi
	-for dir in . $(SUBDIRS) ;  	 do  	   if [ -d stage2/$$dir ] ; then true ; else mkdir stage2/$$dir ; fi ;  	 done
	-mv $(STAGESTUFF) stage2
# Copy as/ld if they exist to stage dir, so that running xgcc.exe from the stage
# dir will work properly.
	-if [ -f as$(exeext) ] ; then ln -s ../as$(exeext) stage2 || copy as$(exeext) stage2 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then ln -s ../ld$(exeext) stage2 || copy ld$(exeext) stage2 ; else true ; fi
	-if [ -f collect-ld ] ; then ln -s ../collect-ld$(exeext) stage2 || copy collect-ld$(exeext) stage2 ; else true ; fi
	-del stage2/libgcc.a
	-cp libgcc.a stage2
	-if $(RANLIB_TEST) ; then $(RANLIB) stage2/libgcc.a; else true; fi
stage2: force stage2-start lang.stage2

stage3-start:
	-if [ -d stage3 ] ; then true ; else mkdir stage3 ; fi
	-for dir in . $(SUBDIRS) ;  	 do  	   if [ -d stage3/$$dir ] ; then true ; else mkdir stage3/$$dir ; fi ;  	 done
	-mv $(STAGESTUFF) stage3
# Copy as/ld if they exist to stage dir, so that running xgcc.exe from the stage
# dir will work properly.
	-if [ -f as$(exeext) ] ; then ln -s ../as$(exeext) stage3 || copy as$(exeext) stage3 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then ln -s ../ld$(exeext) stage3 || copy ld$(exeext) stage3 ; else true ; fi
	-if [ -f collect-ld$(exeext) ] ; then ln -s ../collect-ld$(exeext) stage3 || copy collect-ld$(exeext) stage3 ; else true ; fi
	-del stage3/libgcc.a
	-cp libgcc.a stage3
	-if $(RANLIB_TEST) ; then $(RANLIB) stage3/libgcc.a; else true; fi
stage3: force stage3-start lang.stage3

stage4-start:
	-if [ -d stage4 ] ; then true ; else mkdir stage4 ; fi
	-for dir in . $(SUBDIRS) ;  	 do  	   if [ -d stage4/$$dir ] ; then true ; else mkdir stage4/$$dir ; fi ;  	 done
	-mv $(STAGESTUFF) stage4
# Copy as/ld if they exist to stage dir, so that running xgcc.exe from the stage
# dir will work properly.
	-if [ -f as$(exeext) ] ; then ln -s ../as$(exeext) stage4 || copy as$(exeext) stage4 ; else true ; fi
	-if [ -f ld$(exeext) ] ; then ln -s ../ld$(exeext) stage4 || copy ld$(exeext) stage4 ; else true ; fi
	-if [ -f collect-ld$(exeext) ] ; then ln -s ../collect-ld$(exeext) stage4 || copy collect-ld$(exeext) stage4 ; else true ; fi
	-del stage4/libgcc.a
	-cp libgcc.a stage4
	-if $(RANLIB_TEST) ; then $(RANLIB) stage4/libgcc.a; else true; fi
stage4: force stage4-start lang.stage4

# Copy just the executable files from a particular stage into a subdirectory,
# and delete the object files.  Use this if you're just verifying a version
# that is pretty sure to work, and you are short of disk space.
risky-stage1: stage1
	- make clean

risky-stage2: stage2
	-make clean

risky-stage3: stage3
	-make clean

risky-stage4: stage4
	-make clean

#In GNU Make, ignore whether `stage*' exists.
.PHONY: stage1 stage2 stage3 stage4 clean maintainer-clean TAGS bootstrap
.PHONY: risky-stage1 risky-stage2 risky-stage3 risky-stage4

force:
# Top level makefile fragment for GNU C++.
#   Copyright (C) 1994, 1995 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: cc1plus)
# - define the names for selecting the language in LANGUAGES.

# Extra flags to pass to recursive makes.
CXX_FLAGS_TO_PASS =  	"CXX_FOR_BUILD=$(CXX_FOR_BUILD)"  	"CXXFLAGS=$(CXXFLAGS)"  	"CXX_FOR_TARGET=$(CXX_FOR_TARGET)"

# Actual names to use when installing a native compiler.
CXX_INSTALL_NAME = `t='$(program_transform_name)'; echo c++ | sed $$t`
GXX_INSTALL_NAME = `t='$(program_transform_name)'; echo g++ | sed $$t`

# Actual names to use when installing a cross-compiler.
CXX_CROSS_NAME = `t='$(program_transform_cross_name)'; echo c++ | sed $$t`
GXX_CROSS_NAME = `t='$(program_transform_cross_name)'; echo g++ | sed $$t`

# The name to use for the demangler program.
DEMANGLER_PROG = c++filt

# Define the names for selecting c++ in LANGUAGES.
# Note that it would be nice to move the dependency on g++
# into the C++ rule, but that needs a little bit of work
# to do the right thing within all.cross.
C++ c++: cc1plus

# Tell GNU make to ignore these if they exist.
.PHONY: C++ c++

# Create the compiler driver for g++.
g++: $(srcdir)/cp/g++.c $(CONFIG_H) $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(INCLUDES) $(LDFLAGS) -o $@ $(srcdir)/cp/g++.c $(LIBS)

# Create a version of the g++ driver which calls the cross-compiler.
g++-cross: $(srcdir)/cp/g++.c version.o $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(INCLUDES) $(LDFLAGS) -o $@  	   -DGCC_NAME=\"$(GCC_CROSS_NAME)\" $(srcdir)/cp/g++.c version.o $(LIBS)

cxxmain.o : cplus-dem.c demangle.h
	del cxxmain.c
	ln -s $(srcdir)/cplus-dem.c cxxmain.c > NUL 2>&1  	 || copy $(srcdir)/cplus-dem.c cxxmain.c
	$(CC) -c -DMAIN $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)  	  -DVERSION=\"$(version)\" cxxmain.c
	del cxxmain.c

$(DEMANGLER_PROG): cxxmain.o underscore.o getopt.o getopt1.o $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) $(LIBS) -o $@  	  cxxmain.o underscore.o getopt.o getopt1.o

CXX_SRCS = $(srcdir)/cp/call.c $(srcdir)/cp/decl2.c   $(srcdir)/cp/except.c $(srcdir)/cp/input.c $(srcdir)/cp/pt.c   $(srcdir)/cp/spew.c $(srcdir)/cp/xref.c $(srcdir)/cp/class.c   $(srcdir)/cp/edsel.c $(srcdir)/cp/expr.c $(srcdir)/cp/lex.c   $(srcdir)/cp/ptree.c $(srcdir)/cp/tree.c $(srcdir)/cp/cvt.c   $(srcdir)/cp/errfn.c $(srcdir)/cp/gc.c $(srcdir)/cp/method.c   $(srcdir)/cp/search.c $(srcdir)/cp/typeck.c $(srcdir)/cp/decl.c   $(srcdir)/cp/error.c $(srcdir)/cp/init.c $(srcdir)/cp/parse.y   $(srcdir)/cp/sig.c $(srcdir)/cp/typeck2.c $(srcdir)/cp/repo.c

cc1plus: $(P) $(CXX_SRCS) $(LIBDEPS) stamp-objlist c-common.o c-pragma.o
	cd cp; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) ../cc1plus

# Build hooks:

c++.all.build: g++ $(DEMANGLER_PROG)
c++.all.cross: g++-cross $(DEMANGLER_PROG)
c++.start.encap: g++
c++.rest.encap: $(DEMANGLER_PROG)

c++.info:
c++.dvi:

# Install hooks:
# cc1plus is installed elsewhere as part of $(COMPILERS).

# Nothing to do here.
c++.install-normal:

# Install the driver program as $(target)-g++
# and also as either g++ (if native) or $(tooldir)/bin/g++.
c++.install-common:
	-if [ -f cc1plus$(exeext) ] ; then  	  if [ -f g++-cross$(exeext) ] ; then  	    del $(bindir)/$(GXX_CROSS_NAME)$(exeext);  	    $(INSTALL_PROGRAM) g++-cross$(exeext) $(bindir)/$(GXX_CROSS_NAME)$(exeext);  	    chmod a+x $(bindir)/$(GXX_CROSS_NAME)$(exeext);  	    del $(bindir)/$(CXX_CROSS_NAME)$(exeext);  	    ln $(bindir)/$(GXX_CROSS_NAME)$(exeext) $(bindir)/$(CXX_CROSS_NAME)$(exeext)  	      > NUL 2>&1  	      || copy $(bindir)/$(GXX_CROSS_NAME)$(exeext) $(bindir)/$(CXX_CROSS_NAME)$(exeext) ;  	  else  	    del $(bindir)/$(GXX_INSTALL_NAME)$(exeext);  	    $(INSTALL_PROGRAM) g++$(exeext) $(bindir)/$(GXX_INSTALL_NAME)$(exeext);  	    chmod a+x $(bindir)/$(GXX_INSTALL_NAME)$(exeext);  	    del $(bindir)/$(CXX_INSTALL_NAME)$(exeext);  	    ln $(bindir)/$(GXX_INSTALL_NAME)$(exeext) $(bindir)/$(CXX_INSTALL_NAME)$(exeext)  	      > NUL 2>&1  	      || copy $(bindir)/$(GXX_INSTALL_NAME)$(exeext) $(bindir)/$(CXX_INSTALL_NAME)$(exeext) ;  	  fi ;  	fi

c++.install-info:

c++.install-man: $(srcdir)/cp/g++.1
	-if [ -f cc1plus$(exeext) ] ; then  	  if [ -f g++-cross$(exeext) ] ; then  	    del $(mandir)/$(GXX_CROSS_NAME)$(manext);  	    $(INSTALL_DATA) $(srcdir)/cp/g++.1 $(mandir)/$(GXX_CROSS_NAME)$(manext);  	    chmod a-x $(mandir)/$(GXX_CROSS_NAME)$(manext);  	  else  	    del $(mandir)/$(GXX_INSTALL_NAME)$(manext);  	    $(INSTALL_DATA) $(srcdir)/cp/g++.1 $(mandir)/$(GXX_INSTALL_NAME)$(manext);  	    chmod a-x $(mandir)/$(GXX_INSTALL_NAME)$(manext);  	  fi;  	else true; fi

c++.uninstall:
	-rm -rf $(bindir)/$(CXX_INSTALL_NAME)$(exeext)
	-rm -rf $(bindir)/$(CXX_CROSS_NAME)$(exeext)
	-rm -rf $(bindir)/$(GXX_INSTALL_NAME)$(exeext)
	-rm -rf $(bindir)/$(GXX_CROSS_NAME)$(exeext)
	-rm -rf $(mandir)/$(GXX_INSTALL_NAME)$(manext)
	-rm -rf $(mandir)/$(GXX_CROSS_NAME)$(manext)

# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.

c++.mostlyclean:
	-del cp/*$(objext) $(DEMANGLER_PROG)
c++.clean:
c++.distclean:
	-del cp/ cp/Makefile
	-del cp/parse.output
c++.extraclean:
c++.maintainer-clean:
	-del cp/parse.c cp/parse.h

# Stage hooks:
# The main makefile has already created stage?/cp.

c++.stage1:
	-mv cp/*$(objext) stage1/cp
c++.stage2:
	-mv cp/*$(objext) stage2/cp
c++.stage3:
	-mv cp/*$(objext) stage3/cp
c++.stage4:
	-mv cp/*$(objext) stage4/cp

# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
c++.distdir:
	mkdir tmp/cp
	cd cp ; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) parse.c hash.h
	cd cp;  	for file in *[0-9a-zA-Z+]; do  	  ln $$file ../tmp/cp >NUL 2>&1 || copy $$file ../tmp/cp;  	done
lang.mostlyclean:  c++.mostlyclean	 
lang.clean:  c++.clean	 
lang.distclean:  c++.distclean	 
lang.realclean:  c++.realclean	 
